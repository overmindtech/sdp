syntax = "proto3";

import "google/protobuf/duration.proto";

// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___        
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_       
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_      
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__     
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____    
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________   
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________  
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________ 
//         ___\///////////_____\////////////_____\///______________
option go_package = "github.com/overmindtech/sdp/go/sdp";

// Response is returned when a query is made
message Response {
  // The name of the responder that is working on a response. This is purely
  // informational
  string responder = 1;

  // ResponseState represents the state of the responder, note that both
  // COMPLETE and ERROR are completion states i.e. do not expect any more items
  // to be returned from the request
  enum ResponseState {
    WORKING = 0;
    COMPLETE = 1;
    ERROR = 2;
    CANCELLED = 3;
  }

  // The state of the responder
  ResponseState state = 2;

  // The timespan within which to expect the next update. (e.g. 10s) If no
  // further interim responses are received within this time the connection
  // can be considered stale and the requester may give up
  google.protobuf.Duration nextUpdateIn = 3;

  // UUID if the item request that this response is in relation to (in binary
  // format)
  bytes itemRequestUUID = 4;

  // The error that was returned during the request. This should only be
  // populated if the state is ERROR
  ItemRequestError error = 16;
}

// ItemRequestError is sent back when an item request fails
message ItemRequestError {
   // UUID if the item request that this response is in relation to (in binary
  // format)
  bytes itemRequestUUID = 1;

  // The error type. Any types in here will be gracefully handled unless the
  // type os "OTHER"
  enum ErrorType {
    // This should be used of all other failure modes, such as timeouts,
    // unexpected failures when querying state, permissions errors etc. Errors
    // that return this type should not be cached as the error may be transient.
    OTHER = 0;

    // NOTFOUND means that the item was not found. This is only returned as the
    // result of a GET request since all other requests would return an empty
    // list instead
    NOTFOUND = 1;

    // NOCONTEXT means that the item was not found because we don't have
    // access to the requested context. This should not be interpreted as "The
    // item doesn't exist" (as with a NOTFOUND error) but rather as "We can't
    // tell you whether or not the item exists"
    NOCONTEXT = 2;

    // TIMEOUT means that the source times out when trying to query the item.
    // The timeout is provided in the original request
    TIMEOUT = 3;
  }
  ErrorType errorType = 2;

  // The string contents of the error
  string errorString = 3;

  // The context from which the error was raised
  string context = 4;
}