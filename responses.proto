syntax = "proto3";

import "google/protobuf/duration.proto";

// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________
//         ___\///////////_____\////////////_____\///______________
option go_package = "github.com/overmindtech/sdp-go;sdp";

// ResponderState represents the state of the responder, note that both
// COMPLETE and ERROR are completion states i.e. do not expect any more items
// to be returned from the query
enum ResponderState {
  // The responder is still gathering data
  WORKING = 0;

  // The query is complete
  COMPLETE = 1;

  // All sources have returned errors
  ERROR = 2;

  // Work has been cancelled while in progress
  CANCELLED = 3;

  // The responder has not set a response in the expected interval
  STALLED = 4;
}

// Response is returned when a query is made
message Response {
  // The name of the responder that is working on a response. This is purely
  // informational
  string responder = 1;

  // The state of the responder
  ResponderState state = 2;

  // The timespan within which to expect the next update. (e.g. 10s) If no
  // further interim responses are received within this time the connection
  // can be considered stale and the requester may give up
  google.protobuf.Duration nextUpdateIn = 3;

  // UUID of the item query that this response is in relation to (in binary
  // format)
  bytes UUID = 4;
}
