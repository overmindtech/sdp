syntax = "proto3";

import "items.proto";
import "responses.proto";
import "snapshots.proto";
import "google/protobuf/duration.proto";


// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________
//         ___\///////////_____\////////////_____\///______________
option go_package = "github.com/overmindtech/sdp/go/sdp";

// A union of all request made to the gateway.
message GatewayRequest {
    oneof request_type {
        // Adds a new query for items to the session, starting it immediately
        Query query = 1;
        // Cancel a running query
        CancelQuery cancelQuery = 3;
        // Undo the specified query, if it was the last query received by the gateway. This removes it and all of its effects from the session
        UndoQuery undoQuery = 4;

        // TODO: implement
        // // Exclude an item from the results
        // Reference excludeItem = 5;
        // // Remove an item from the list of exclusions
        // Reference includeItem = 6;

        // Expand all linked items for the given item
        Expand expand = 7;
        // Undo the specified item expansion
        UndoExpand undoExpand = 8;
        // TODO: CancelExpand?

        // return the list of snapshots for this account
        ListSnapshots listSnapshots = 9;
        // store the current session state as snapshot
        StoreSnapshot storeSnapshot = 10;
        // load a snapshot into the current state
        LoadSnapshot loadSnapshot = 11;
        // delete a snapshot from the underlying storage
        DeleteSnapshot deleteSnapshot = 12;
        // TODO: implement?
        // // cancel the loading of a snapshot
        // CancelLoadSnapshot cancelLoadSnapshot = ??;
        // // undo the loading of a snapshot
        // UndoLoadSnapshot undoLoadSnapshot = ??;

        // TODO: implement!
        // // return the list of bookmarks for this account
        // ListBookmarks listBookmarks = 9;
        // // store the current set of queries as bookmarks
        // StoreBookmark storeBookmark = 10;
        // // load and execute a bookmark into the current state
        // LoadBookmark loadBookmark = 11;
        // // delete a bookmark from the underlying storage
        // DeleteBookmark deleteBookmark = 12;
        // // TODO: implement?
        // // // cancel the loading of a Bookmark
        // // CancelLoadBookmark cancelLoadBookmark = ??;
        // // // undo the loading of a Bookmark
        // // UndoLoadBookmark undoLoadBookmark = ??;
    }

    optional google.protobuf.Duration minStatusInterval = 2; // Minimum time between status updates. Setting this value too low can result in too many status messages
}

// The gateway will always respond with this type of message,
// however the purpose of it is purely as a wrapper to the many different types
// of messages that the gateway can send
message GatewayResponse {
    oneof response_type {
        Item newItem = 2; // A new item that has been discovered
        Edge newEdge = 3; // A new edge between two items

        GatewayRequestStatus status = 4; // Status of the overall request
        string error = 5; // An error that means the request couldn't be executed

        QueryError queryError = 6; // A new error that was encountered as part of a query

        Reference deleteItem = 7; // An item that should be deleted from local state
        Edge deleteEdge = 8; // An edge that should be deleted form local state

        Item updateItem = 9; // An item that has already been sent, but contains new data, it should be updated to reflect this version

        SnapshotListResult snapshotListResult = 10;
        SnapshotStoreResult snapshotStoredResult = 11;
        SnapshotLoadResult snapshotLoadResult = 12;
        SnapshotDeleteResult snapshotDeleteResult = 13;
    }
}

// Contains the status of the gateway request.
message GatewayRequestStatus {
    map<string, ResponderState> responderStates = 1;

    message Summary {
        int32 working = 1;
		int32 stalled = 2;
		int32 complete = 3;
		int32 error = 4;
		int32 cancelled = 5;
		int32 responders = 6;
    }

    Summary summary = 3;

    // Whether all items have finished being processed by the gateway. It is
    // possible for all responders to be complete, but the gateway is still
    // working. A request should only be considered complete when all working ==
    // 0 and postProcessingComplete == true
    bool postProcessingComplete = 4;
}