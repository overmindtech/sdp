syntax = "proto3";

package changes;

import "google/protobuf/timestamp.proto";
import "items.proto";

//              ______
//           ,'"       "-._
//         ,'              "-._ _._
//         ;              __,-'/   |
//        ;|           ,-' _,'"'._,.
//        |:            _,'      |\ `.
//        : \       _,-'         | \  `.
//         \ \   ,-'             |  \   \
//          \ '.         .-.     |       \
//           \  \         "      |        :
//            `. `.              |        |
//              `. "-._          |        ;
//              / |`._ `-._      L       /
//             /  | \ `._   "-.___    _,'
//            /   |  \_.-"-.___   """"
//            \   :            /"""
//             `._\_       __.'_
//        __,--''_ ' "--'''' \_  `-._
//  __,--'     .' /_  |   __. `-._   `-._
// <            `.  `-.-''  __,-'     _,-'
//  `.            `.   _,-'"      _,-'
//    `.            ''"lka    _,-'
//      `.                _,-'
//        `.          _,-'
//          `.   __,'"
//            `'"
// Credit: https://www.asciiart.eu/
option go_package = "github.com/overmindtech/sdp-go;sdp";

// All the request/reply APIs for the Change/App iteration
service ChangesService {
  // Lists all apps
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // Creates a new app
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse);
  // Gets the details of an existing app
  rpc GetApp(GetAppRequest) returns (GetAppResponse);
  // Updates an existing app
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);
  // Deletes an app
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse);

  // Lists all changes
  rpc ListChanges(ListChangesRequest) returns (ListChangesResponse);
  // Creates a new change
  rpc CreateChange(CreateChangeRequest) returns (CreateChangeResponse);
  // Gets the details of an existing change
  rpc GetChange(GetChangeRequest) returns (GetChangeResponse);
  // Updates an existing change
  rpc UpdateChange(UpdateChangeRequest) returns (UpdateChangeResponse);
  // Deletes a change
  rpc DeleteChange(DeleteChangeRequest) returns (DeleteChangeResponse);

  // Calculates the blast radius of a change using the
  // `changingItemsBookmarkUUID` as the starting point. If the
  // `changingItemsBookmarkUUID` is blank, this will return an error.
  // Returns a stream of status updates. The response stream closes when all calculating has been done.
  // Executing this RPC will move the Change to the `STATUS_DEFINING` state or return an error.
  rpc CalculateBlastRadius(CalculateBlastRadiusRequest) returns (stream CalculateBlastRadiusResponse);

  rpc GetOnboarding(GetOnboardingRequest) returns (GetOnboardingResponse);
  rpc UpdateOnboarding(UpdateOnboardingRequest) returns (UpdateOnboardingResponse);

  // Simulates a change without the user actually having to do anything. The
  // change specified in the request should be in the `STATUS_DEFINING` state.
  // It will be moved to the `STATUS_DONE` state after the simulation is
  // complete.
  rpc SimulateChange(SimulateChangeRequest) returns (stream SimulateChangeResponse);

  rpc GetChangesHome(GetChangesHomeRequest) returns (GetChangesHomeResponse);
  rpc ListAppChanges(ListAppChangesRequest) returns (ListAppChangesResponse);


  /////////////////////////////////////////////////////////////////////////////
  // View Specifics
  /////////////////////////////////////////////////////////////////////////////

  ///// Home View
  rpc GetHomeApps() returns (repeated AppSummary);
  rpc GetHomeChanges() returns (repeated ChangeSummary);

  ///// App View - Main
  rpc GetAppSummary(AppId) returns (AppSummary);
  rpc GetChangesAffectingApp(AppId) returns (repeated ChangeSummary);

  ///// Create Change - CreateChange
  // see CRUD
  // Select Types
  // rpc GetItemTypes() returns (repeated string) // already exists in in sdp-js
  // "Select the items you want to change";
  // Executing this RPC will move the Change to the `STATUS_DEFINING` state or return an error.
  // returns a stream of status updates for a progress "bar"
  rpc UpdateChangingItems(uuid changeUUID, repeated Reference) returns (stream CalculateBlastRadiusResponse);

  // Review Change - Change Details
  // rpc GetChangeSummary(ChangeId) returns (ChangeSummary);
  // use rpc GetChange() to get all data

  // Review Change - Affected Items
  // for "You will change": render queries from GetBookmark(changingItemsBookmarkUUID)
  // the queries will all be GET queries with linkdepth=0

  // for Potential Blast Radius - Apps
  rpc GetAffectedApps(uuid changeUUID) returns (repeated AppSummary);
  // this will take a while, running CalculateBlastRadius in the background

  // for Potential Blast Radius - Items: look at the gateway session results from loading the blastRadiusSnapshotUUID into the graph

  // for the Graph: load/construct from the blastRadiusSnapshotUUID

  // Review Change - "Start Change"
  // Executing this RPC take a snapshot of the current blast radius and store it
  // in `systemBeforeSnapshotUUID` and then advance the status to
  // `STATUS_HAPPENING`. It can only be called once per change.
  rpc StartChange(StartChangeRequest) returns (stream StartChangeResponse);

  // Review Change - Complete Review
  // Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID`, calculates
  // the change diff and stores it as a list of DiffedItems and
  // advances the change status to `STATUS_DONE`
  rpc EndChange(EndChangeRequest) returns (stream EndChangeResponse);

  ///// Change View

  // Change will always be in `STATUS_DONE`
  // use rpc `GetChange()` to get all attribute data

  // for "Items you changed": item status of the results of the queries in
  // `changingItemsBookmarkUUID` as captured in the `systemAfterSnapshotUUID`
  rpc GetChangedItemsStatus(changeID) returns(repeated ItemStatus);

  // Change Timeline (formerly known as Process Tree)
  rpc GetChangeAuditLog(changeID) returns (repeated ChangeAuditLogEntry);

  // Affected apps
  // see `rpc GetAffectedApps(uuid changeUUID) returns (repeated AppSummary);` above

  // view in changes graph link
  // use `systemAfterSnapshotUUID` from the change for seeding the graph

  ///// Changes Graph
  // items you changed
  // use rpc `GetChangedItemsStatus(changeID)`

  // graph, sidebar and attributes data
  rpc GetDiffedGraph(changeId) returns (GetDiffedGraphResponse);
}

message GetDiffedGraphResponse {
  repeated DiffedItem diffedItem=1;
  repeated Edge afterEdge=2;
}

message DiffedItem {
  string type = 1;
  string uniqueAttributeValue = 2;
  string scope = 5;
  ItemDiffStatus changed; // Unchanged, Created, Updated, Deleted

  Item before
  Item after
}
// alternatly we could go full item history timeline,
// but we decided that would be a step too far for the time
// allotted until the AWS Summit in two weeks
// message ItemWithHistory {
//   string type = 1;
//   string uniqueAttributeValue = 2;
//   string scope = 5;

//   message ItemHistoryEntry {
//     ItemAttributes attributes = 3;
//     Metadata metadata = 4;
//     repeated LinkedItemQuery linkedItemQueries = 16;
//     repeated LinkedItem linkedItems = 17;
//     optional Health health = 18;
//   }

//   repeated ItemHistoryEntry
// }

message ItemStatus {
  string type;
  string name;
  HealthStatus health; // Pending, Good, Warning, Error
  ItemDiffStatus changed; // Unchanged, Created, Updated, Deleted
}

message ChangeAuditLogEntry {
  ChangeStatus status;
  string statusMessage;
  timestamp happenedAt;
  string actorName;
}

message AppsSummary {
  bytes UUID = 1;
  string name = 2;
  string description = 3;
  int32 numAffectedItems = 4;
  int32 numChangesAffecting = 5;
  google.protobuf.Timestamp createdAt = 6;
  string creatorName = 7;
  string creatorLink = 8;
  string apiEndpoint = 9;
  bytes bookmarkUUID = 10;
}

message ChangeSummary {
  bytes UUID = 1;
  string title = 2;
  ChangeStatus status = 3;
  string ticketLink = 4;
  google.protobuf.Timestamp createdAt = 5;
  string creatorName = 6;
  string creatorLink = 7;
  int32 numAffectedApps = 8;
  int32 numAffectedItems = 9;
}


//////////
// Apps //
//////////

// a complete App with machine-supplied and user-supplied values
message App {
  // machine-generated metadata of this app
  AppMetadata metadata = 1;

  // user-supplied properties of this app
  AppProperties properties = 2;
}

// machine-generated metadata of this app
message AppMetadata {
  // unique id to identify this app
  bytes UUID = 1;

  // timestamp when this app was created
  google.protobuf.Timestamp createdAt = 2;

  // timestamp when this app was last updated
  google.protobuf.Timestamp updatedAt = 3;

  // number of items that are part of the app (results of bookmarkUUID)
  // TODO: store/cache in database
  int32 numItems = 4;

  // the last time that the list of items was updated
  google.protobuf.Timestamp itemsLastUpdated = 5;

  // number of changes that have affected this app
  // TODO: store/cache in database
  int32 numChanges = 6;
}

// user-supplied properties of this app
message AppProperties {
  // Name of this App
  // Example: "Contoso Manager"
  string name = 1;

  // Description of this App
  // Example: "The Contoso Manager manages the contoso. Notable components are storage, compute and the web. Talk to Jimmy or Susan on 555-CM LEAD for more details."
  string description = 2;

  // UUID of the bookmark query that returns all items in this app
  bytes bookmarkUUID = 3;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// list all apps
message ListAppsRequest {}

message ListAppsResponse {
  repeated changes.App apps = 1;
}

// create a new app
message CreateAppRequest {
  changes.AppProperties properties = 1;
}

message CreateAppResponse {
  changes.App app = 1;
}

// get the details of an existing app
message GetAppRequest {
  bytes UUID = 1;
}

message GetAppResponse {
  changes.App app = 1;
}

// update an expsting app
message UpdateAppRequest {
  bytes UUID = 1;
  changes.AppProperties properties = 2;
}

message UpdateAppResponse {
  changes.App app = 1;
}

// delete an app
message DeleteAppRequest {
  bytes UUID = 1;
}

message DeleteAppResponse {}

// list all changes for an app
message ListAppChangesRequest {
  // The UUID of the app to list changes for
  bytes UUID = 1;
}

message ListAppChangesResponse {
  // The list of changes rel
  repeated changes.Change changes = 1;
}

/////////////
// Changes //
/////////////

enum ChangeStatus {
  // The change has been created, but the blast radius has not yet been
  // calculated. The blast radius can be calculated using the
  // `CalculateBlastRadius` RPC.
  CHANGE_STATUS_UNSPECIFIED = 0;
  // The blast radius has been calculated, but the chnage has not yet started.
  // The change can be started using the `StartChange` RPC.
  CHANGE_STATUS_DEFINING = 1;
  // The change is in progress. The change can be ended using the `EndChange`
  // RPC.
  CHANGE_STATUS_HAPPENING = 2;
  // The change has been ended, but the results have not yet been processed.
  CHANGE_STATUS_PROCESSING = 3;
  // The change has been ended and the results have been processed.
  CHANGE_STATUS_DONE = 4;
}

// a complete Change with machine-supplied and user-supplied values
message Change {
  // machine-generated metadata of this change
  ChangeMetadata metadata = 1;

  // user-supplied properties of this change
  ChangeProperties properties = 2;
}

// machine-generated metadata of this change
message ChangeMetadata {
  // unique id to identify this change
  bytes UUID = 1;

  // timestamp when this change was created
  google.protobuf.Timestamp createdAt = 2;

  // timestamp when this change was last updated
  google.protobuf.Timestamp updatedAt = 3;

  // The current status of this change. This is changed by the lifecycle
  // functions such as `StartChange` and `EndChange`.
  ChangeStatus status = 4;

  // view changes by items
  int32 numUnchangedItems
  int32 numCreatedItems
  int32 numChangedItems
  int32 numDeletedItems

  // Change View - view changes by item diffs
  // descoped
  // int32 numUnchangedDiffs
  // int32 numCreatedDiffs
  // int32 numChangedDiffs
  // int32 numDeletedDiffs

  // Change View - Health Summary
  message HealthStats {
    int32 base;
    int32 added;
    int32 removed;
  }
  HealthStats numPendingHealths
  HealthStats numGoodHealths
  HealthStats numWarningHealths
  HealthStats numErrorHealths
}

// user-supplied properties of this change
message ChangeProperties {
  reserved 1;

  // Short title for this change.
  // Example: "database upgrade"
  string title = 2;

  // Quick description of the change.
  // Example: "upgrade of the database to get access to the new contoso management processor"
  string description = 3;

  // Link to the ticket for this change.
  // Example: "http://jira.contoso-engineering.com/browse/CM-1337"
  string ticketLink = 4;

  // The owner of this change.
  // Example: Susan
  string owner = 5;

  // A comma-separated list of emails to keep updated with the status of this change.
  // Example: susan@contoso.com, jimmy@contoso.com
  string ccEmails = 6;

  // UUID of a bookmark for the item queries of the items *directly* affected by
  // this change. This might be parsed from a terrform plam, added from the API,
  // parsed from a freeform ticket description etc.
  bytes changingItemsBookmarkUUID = 7;

  // UUID of a snapshot for the item queries of the items *indirectly* affected
  // by this change i.e. the blast radius. The initial selection will be determined
  // automatically based off changingItemsBookmark, but can refined by the user.
  bytes blastRadiusSnapshotUUID = 11;

  // UUID of the whole-system snapshot created before the change has started.
  bytes systemBeforeSnapshotUUID = 8;

  // UUID of the whole-system snapshot created after the change has finished.
  bytes systemAfterSnapshotUUID = 9;

  // list of UUIDs for apps affected by this change.
  repeated bytes affectedAppsUUID = 10;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// list all changes
message ListChangesRequest {}

message ListChangesResponse {
  repeated changes.Change changes = 1;
}

// create a new change
message CreateChangeRequest {
  changes.ChangeProperties properties = 1;
}

message CreateChangeResponse {
  changes.Change change = 1;
}

// get the details of a specific change
message GetChangeRequest {
  bytes UUID = 1;
}

message GetChangeResponse {
  changes.Change change = 1;
}

// update an existing change
message UpdateChangeRequest {
  bytes UUID = 1;
  changes.ChangeProperties properties = 2;
}

message UpdateChangeResponse {
  changes.Change change = 1;
}

// delete a change
message DeleteChangeRequest {
  bytes UUID = 1;
}

message DeleteChangeResponse {}

message CalculateBlastRadiusRequest {
  // ID of the change to calculate the blast radius for.
  bytes changeUUID = 1;
  // If true, the blast radius will be calculated again, even if it was already.
  // Otherwise if the blast radius has already been calculated (i.e. the status
  // is `DEFINING` and `blastRadiusBookmarkUUID` is set) an error will be
  // returned.
  bool force = 2;
}

message CalculateBlastRadiusResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // The blast radius is being calculated.
    STATE_DISCOVERING = 1;
    // The blast radius has been calculated and is being saved
    STATE_SAVING = 2;
    // Determining which apps are within the blast radius
    STATE_FINDING_APPS = 3;
    // Everything is complete
    STATE_DONE = 4;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 numEdges = 3;

  // oneof response_type {
  //   Item newItem = 2; // A new item that has been discovered
  //   Edge newEdge = 3; // A new edge between two items
  // }
}

message StartChangeRequest {
  bytes changeUUID = 1;
}

message StartChangeResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // Snapshot is being taken
    STATE_TAKING_SNAPSHOT = 1;
    // Snapshot is being saved
    STATE_SAVING_SNAPSHOT = 2;
    // Everything is complete
    STATE_DONE = 3;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 NumEdges = 3;
}

message EndChangeRequest {
  bytes changeUUID = 1;
}

message EndChangeResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // Snapshot is being taken
    STATE_TAKING_SNAPSHOT = 1;
    // Snapshot is being saved
    STATE_SAVING_SNAPSHOT = 2;
    // Everything is complete
    STATE_DONE = 3;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 NumEdges = 3;
}

////////////////
// Onboarding //
////////////////

enum OnboardingStatus {
  ONBOARDING_STATUS_UNSPECIFIED = 0;
  ONBOARDING_STATUS_WELCOME_PAGE = 1;
  ONBOARDING_STATUS_CONFIGURE_AWS_INTRO = 2;
  ONBOARDING_STATUS_CONFIGURE_AWS_PARAMS = 3;
  ONBOARDING_STATUS_CONFIGURE_AWS_SUCCESS = 4;
  ONBOARDING_STATUS_DEFINE_APP_PARAMS = 5;
  ONBOARDING_STATUS_DEMO_CHANGE_PARAMS = 6;
  ONBOARDING_STATUS_DEMO_CHANGE_GRAPH = 7;
  ONBOARDING_STATUS_SIMULATING_CHANGE = 8;
  ONBOARDING_STATUS_RESULTS = 9;
  ONBOARDING_STATUS_DONE = 10;
}

// complete Onboarding information with machine-supplied and user-supplied values
message Onboarding {
  // machine-generated metadata of this onboarding info
  OnboardingMetadata metadata = 1;

  // user-supplied properties of this onboarding info
  OnboardingProperties properties = 2;
}

// machine-generated metadata of this onboarding info
message OnboardingMetadata {
  // timestamp when this onboarding info was created
  google.protobuf.Timestamp created = 2;
}

// user-supplied properties of this onboarding info
message OnboardingProperties {
  // The current status of this onboarding info.
  OnboardingStatus status = 1;

  // The UUID for the aws-source that was configured as part of onboarding
  bytes awsSourceUUID = 2;

  // The UUID of the app that was created as part of onboarding
  bytes appUUID = 3;

  // The UUID of the change that was created as part of onboarding
  bytes changeUUID = 4;

  // List of items that the user should be able to select when simulating their
  // change. These should be gathered by the frontend and should be items that
  // are within 1 link of the application that the user defined so that we know
  // we can find the app as part of the blast radius
  repeated Item selectableItems = 5;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// get the onboarding status
message GetOnboardingRequest {}

message GetOnboardingResponse {
  changes.Onboarding onboarding = 1;
}

// update onboarding status
message UpdateOnboardingRequest {
  changes.OnboardingProperties properties = 2;
}

message UpdateOnboardingResponse {
  changes.Onboarding onboarding = 1;
}

message SimulateChangeRequest {
  // The ID of the change to simulate
  bytes changeUUID = 1;
}

message SimulateChangeResponse {
  // Whether the simulation is complete
  bool done = 1;

  // How far through the simulation process we are. This will be pretty
  // apprioximate as it's not expected to take very long and is more to give the
  // sense of progress than to be an accurate measure
  uint32 percentComplete = 2;
}

//////////////////
// Changes Home //
//////////////////

////////////////////////////
// Requests and Responses //
////////////////////////////

message GetChangesHomeRequest {}

message GetChangesHomeResponse {
  oneof data {
    GetChangesHomeData changesHome = 1;
    changes.Onboarding onboarding = 2;
  }
}

message GetChangesHomeData {
  string owner = 1;
  repeated changes.Change recentChanges = 2;
  repeated changes.App recentApps = 3;
}
