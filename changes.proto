syntax = "proto3";

package changes;

import "google/protobuf/timestamp.proto";

import "bookmarks.proto";
import "items.proto";
import "snapshots.proto";

//              ______
//           ,'"       "-._
//         ,'              "-._ _._
//         ;              __,-'/   |
//        ;|           ,-' _,'"'._,.
//        |:            _,'      |\ `.
//        : \       _,-'         | \  `.
//         \ \   ,-'             |  \   \
//          \ '.         .-.     |       \
//           \  \         "      |        :
//            `. `.              |        |
//              `. "-._          |        ;
//              / |`._ `-._      L       /
//             /  | \ `._   "-.___    _,'
//            /   |  \_.-"-.___   """"
//            \   :            /"""
//             `._\_       __.'_
//        __,--''_ ' "--'''' \_  `-._
//  __,--'     .' /_  |   __. `-._   `-._
// <            `.  `-.-''  __,-'     _,-'
//  `.            `.   _,-'"      _,-'
//    `.            ''"lka    _,-'
//      `.                _,-'
//        `.          _,-'
//          `.   __,'"
//            `'"
// Credit: https://www.asciiart.eu/
option go_package = "github.com/overmindtech/sdp-go;sdp";

// All the request/reply APIs for the Change/App iteration
service ChangesService {
  // Lists all apps
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // Creates a new app
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse);
  // Creates an app using just a URL as input. This automatically creates and
  // sets the bookmark UUID, along with the url for display in the GUI
  rpc CreateSimpleApp(CreateSimpleAppRequest) returns (CreateSimpleAppResponse);
  // Gets the details of an existing app
  rpc GetApp(GetAppRequest) returns (GetAppResponse);
  // Updates an existing app
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);
  // Deletes an app
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse);

  // Lists all changes
  rpc ListChanges(ListChangesRequest) returns (ListChangesResponse);
  // list all changes in a specific status
  rpc ListChangesByStatus(ListChangesByStatusRequest) returns (ListChangesByStatusResponse);
  // Creates a new change
  rpc CreateChange(CreateChangeRequest) returns (CreateChangeResponse);
  // Gets the details of an existing change
  rpc GetChange(GetChangeRequest) returns (GetChangeResponse);
  // Gets the all data of an existing change for archival
  rpc GetChangeArchive(GetChangeArchiveRequest) returns (GetChangeArchiveResponse);
  // Updates an existing change
  rpc UpdateChange(UpdateChangeRequest) returns (UpdateChangeResponse);
  // Deletes a change
  rpc DeleteChange(DeleteChangeRequest) returns (DeleteChangeResponse);

  // Get the timeline of changes for a given change
  rpc GetChangeTimeline(GetChangeTimelineRequest) returns (GetChangeTimelineResponse);

  // Ask the gateway to refresh all internal caches and status slots
  // The RPC will return immediately doing all processing in the background
  rpc RefreshState(RefreshStateRequest) returns (RefreshStateResponse);

  // Calculates the blast radius of a change using the
  // `changingItemsBookmarkUUID` as the starting point. If the
  // `changingItemsBookmarkUUID` is blank, this will return an error.
  // Returns a stream of status updates. The response stream closes when all calculating has been done.
  // Executing this RPC will move the Change to the `STATUS_DEFINING` state or return an error.
  rpc CalculateBlastRadius(CalculateBlastRadiusRequest) returns (stream CalculateBlastRadiusResponse);

  // Executing this RPC take a snapshot of the current blast radius and store it
  // in `systemBeforeSnapshotUUID` and then advance the status to
  // `STATUS_HAPPENING`. It can only be called once per change.
  rpc StartChange(StartChangeRequest) returns (stream StartChangeResponse);

  // Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID`, calculates
  // the change diff and stores it as a list of DiffedItems and
  // advances the change status to `STATUS_DONE`
  rpc EndChange(EndChangeRequest) returns (stream EndChangeResponse);

  // Simulates a change without the user actually having to do anything. The
  // change specified in the request should be in the `STATUS_DEFINING` state.
  // It will be moved to the `STATUS_DONE` state after the simulation is
  // complete.
  rpc SimulateChange(SimulateChangeRequest) returns (stream SimulateChangeResponse);

  rpc GetOnboarding(GetOnboardingRequest) returns (GetOnboardingResponse);
  rpc UpdateOnboarding(UpdateOnboardingRequest) returns (UpdateOnboardingResponse);

  // Lists all apps, designed for use in the apps home page
  rpc ListHomeApps(ListHomeAppsRequest) returns (ListHomeAppsResponse);

  // Lists all changes, designed for use in the changes home page
  rpc ListHomeChanges(ListHomeChangesRequest) returns (ListHomeChangesResponse);

  // Gets a summary of an app, used when a user clicks on a given app
  rpc GetAppSummary(GetAppSummaryRequest) returns (GetAppSummaryResponse);

  // Gets a summaries of a list of apps
  rpc GetAppSummaries(GetAppSummariesRequest) returns (GetAppSummariesResponse);

  // Lists all changes affecting an app
  rpc ListAppChanges(ListAppChangesRequest) returns (ListAppChangesResponse);

  // Lists all changes affecting an app, returning only a summary of each change
  // rather than the full details
  rpc ListAppChangesSummary(ListAppChangesSummaryRequest) returns (ListAppChangesSummaryResponse);

  // This sets the items that are changing in a given change, and updates the
  // blast radius. In the backend this will convert the references to GET
  // requests, save them to a bookmark, and set this as the
  // changingItemsBookmarkUUID in the change itself before triggering a blast
  // radius calculation
  rpc UpdateChangingItems(UpdateChangingItemsRequest) returns (stream CalculateBlastRadiusResponse);

  // This sets the item diffs that are changing in a given change, and updates
  // the blast radius. In the backend this will save the item diffs for later
  // display and use the item's references to fabricate a bookmark, and set this
  // as changingItemsBookmarkUUID in the change itself before triggering a blast
  // radius calculation. Note that not all of the changing items have to exist
  // in our current sources.
  rpc UpdatePlannedChanges(UpdatePlannedChangesRequest) returns (stream CalculateBlastRadiusResponse);

  // Returns a list of apps that are affected by this change. This is calculated
  // by looking at the blast radius snapshot and finding all apps that have
  // items in the snapshot.
  rpc GetAffectedApps(GetAffectedAppsRequest) returns (GetAffectedAppsResponse);

  // Gets the diff summary for all items that were planned to change as part of
  // this change. This includes the high level details of the item, and the
  // status (e.g. changed, deleted) but not the diff itself
  rpc ListChangingItemsSummary(ListChangingItemsSummaryRequest) returns (ListChangingItemsSummaryResponse);

  // Gets the full diff of everything that changed as part of this "change".
  // This includes all items and also edges between them
  rpc GetDiff(GetDiffRequest) returns (GetDiffResponse);
}

message GetChangeTimelineRequest {
  bytes changeUUID = 1;
}

message GetChangeTimelineResponse {
  repeated ChangeTimelineEntry entries = 1;
}

message ChangeTimelineEntry {
  // The status that this event should be associated with. Usually this would be
  // the status that the changed ended up in as a result of this action
  ChangeStatus status = 1;

  // The message that describes this event
  string statusMessage = 2;

  // The time that this event happened
  google.protobuf.Timestamp happenedAt = 3;

  // The name of the user that performed this action
  string actorName = 4;
}

message GetDiffRequest {
  bytes changeUUID = 1;
}

message GetDiffResponse {
  // Items that were planned to be changed, and were changed
  repeated ItemDiff expectedItems = 1;

  // Items that were changed, but were not planned to be changed
  repeated ItemDiff unexpectedItems = 3;

  repeated Edge edges = 2;

  // Items that were planned to be changed, but were not changed
  repeated ItemDiff unexpectedUnchangedItems = 4;
}

message ListChangingItemsSummaryRequest {
  bytes changeUUID = 1;
}

message ListChangingItemsSummaryResponse {
  repeated ItemDiffSummary items = 1;
}

message GetAffectedAppsRequest {
  bytes changeUUID = 1;
}

message GetAffectedAppsResponse {
  repeated changes.AppSummary apps = 1;
}

message UpdateChangingItemsRequest {
  // The change to update
  bytes changeUUID = 1;

  // References to the items that are changing
  repeated Reference changingItems = 2;
}

message MappedItemDiff {
  // The item that is changing and any know changes to it
  ItemDiff item = 1;

  // a mapping query that can be used to find the item. this can be empty if the
  // submitter does not know how to map this item.
  optional Query mappingQuery = 2;
}

message UpdatePlannedChangesRequest {
  // The change to update
  bytes changeUUID = 1;

  // the changing items
  repeated MappedItemDiff changingItems = 2;
}

message ListAppChangesSummaryRequest {
  bytes appUUID = 1;
}

message ListAppChangesSummaryResponse {
  repeated ChangeSummary changes = 1;
}

message GetAppSummaryRequest {
  bytes UUID = 1;
}

message GetAppSummaryResponse {
  changes.AppSummary app = 1;
}

message GetAppSummariesRequest {
  repeated bytes UUIDs = 1;
}

message GetAppSummariesResponse {
  repeated changes.AppSummary apps = 1;
}

message ListHomeChangesRequest {}
message ListHomeChangesResponse {
  repeated ChangeSummary changes = 1;
}

message ListHomeAppsRequest {}
message ListHomeAppsResponse {
  repeated AppSummary apps = 1;
}

message ItemDiffSummary {
  // Editor's node: I'm using references here rather than just directly
  // embedding the name, uniqueAttributeValue and scope becuase the reference
  // structs have some methods on them which it might be useful to use (like
  // `String()`), and that some methods will accept a reference as a parameter
  // and it doesn't make sense to have to re-construct one if you already have
  // all the required data

  // A reference to the item that this diff is related to
  Reference item = 1;

  // The staus of the item
  ItemDiffStatus status = 4;

  // The health of the item currently (as opposed to before the change)
  Health healthAfter = 5;
}

enum ItemDiffStatus {
  ITEM_DIFF_STATUS_UNSPECIFIED = 0;
  ITEM_DIFF_STATUS_UNCHANGED = 1;
  ITEM_DIFF_STATUS_CREATED = 2;
  ITEM_DIFF_STATUS_UPDATED = 3;
  ITEM_DIFF_STATUS_DELETED = 4;
  ITEM_DIFF_STATUS_REPLACED = 5;
}

message ItemDiff {
  // A reference to the item that this diff is related to
  Reference item = 1;

  // The staus of the item
  ItemDiffStatus status = 2;

  Item before = 3;
  Item after = 4;
}

//////////
// Apps //
//////////

message AppSummary {
  // unique id to identify this app
  bytes UUID = 1;

  // Name of this App
  // Example: "Contoso Manager"
  string name = 2;

  // Description of this App Example: "The Contoso Manager manages the contoso.
  // Notable components are storage, compute and the web. Talk to Jimmy or Susan
  // on 555-CM LEAD for more details."
  string description = 3;

  // number of changes that have affected this app
  int32 numChangesAffecting = 4;

  // the number of items that make up this app
  int32 numItems = 5;

  // timestamp when this app was created
  google.protobuf.Timestamp createdAt = 6;

  // The name of the person that created the app
  string creatorName = 7;

  // I'm going to omit the creatorLink for now, since it's not clear what it
  // should be. It could be a link to the user's profile page, but that's not
  // really a thing yet
  // string creatorLink = 8;

  // the url for this app. This will only be set if the app was created using
  // the `CreateSimpleApp` RPC.
  string url = 9;

  // UUID of the bookmark query that returns all items in this app
  bytes bookmarkUUID = 10;
}

// a complete App with machine-supplied and user-supplied values
message App {
  // machine-generated metadata of this app
  AppMetadata metadata = 1;

  // user-supplied properties of this app
  AppProperties properties = 2;
}

// machine-generated metadata of this app
message AppMetadata {
  // unique id to identify this app
  bytes UUID = 1;

  // timestamp when this app was created
  google.protobuf.Timestamp createdAt = 2;

  // timestamp when this app was last updated
  google.protobuf.Timestamp updatedAt = 3;

  // items that are part of the app
  repeated Reference items = 4;

  // the last time that the list of items was updated
  google.protobuf.Timestamp itemsLastUpdated = 5;

  // number of changes that have affected this app
  int32 numChangesAffecting = 6;

  // the number of items that make up this app
  int32 numItems = 8;

  // the name of the person that created the app
  string creatorName = 7;

  // the url for this app. This will only be set if the app was created using
  // the `CreateSimpleApp` RPC.
  string url = 9;
}

// user-supplied properties of this app
message AppProperties {
  // Name of this App
  // Example: "Contoso Manager"
  string name = 1;

  // Description of this App. Example: "The Contoso Manager manages the contoso.
  // Notable components are storage, compute and the web. Talk to Jimmy or Susan
  // on 555-CM LEAD for more details."
  string description = 2;

  // UUID of the bookmark query that returns all items in this app
  bytes bookmarkUUID = 3;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// list all apps
message ListAppsRequest {}

message ListAppsResponse {
  repeated changes.App apps = 1;
}

// create a new app
message CreateAppRequest {
  changes.AppProperties properties = 1;
}

message CreateAppResponse {
  changes.App app = 1;
}

message CreateSimpleAppRequest {
  // The name of the app
  string name = 1;
  // The description of the app
  string description = 2;
  // The URL of the app
  string url = 3;
}

message CreateSimpleAppResponse {
  changes.App app = 1;
}

// get the details of an existing app
message GetAppRequest {
  bytes UUID = 1;
}

message GetAppResponse {
  changes.App app = 1;
}

// update an expsting app
message UpdateAppRequest {
  bytes UUID = 1;
  changes.AppProperties properties = 2;
}

message UpdateAppResponse {
  changes.App app = 1;
}

// delete an app
message DeleteAppRequest {
  bytes UUID = 1;
}

message DeleteAppResponse {}

// list all changes for an app
message ListAppChangesRequest {
  // The UUID of the app to list changes for
  bytes UUID = 1;
}

message ListAppChangesResponse {
  // The list of changes related to an app
  repeated changes.Change changes = 1;
}

/////////////
// Changes //
/////////////

enum ChangeStatus {
  // The change has been created, but the blast radius has not yet been
  // calculated. The blast radius can be calculated using the
  // `CalculateBlastRadius` RPC.
  CHANGE_STATUS_UNSPECIFIED = 0;
  // The blast radius has been calculated, but the change has not yet started.
  // The change can be started using the `StartChange` RPC.
  CHANGE_STATUS_DEFINING = 1;
  // The change is in progress. The change can be ended using the `EndChange`
  // RPC.
  CHANGE_STATUS_HAPPENING = 2;
  // The change has been ended, but the results have not yet been processed.
  CHANGE_STATUS_PROCESSING = 3;
  // The change has been ended and the results have been processed.
  CHANGE_STATUS_DONE = 4;
}

// A smaller summary of a change
message ChangeSummary {
  // unique id to identify this change
  bytes UUID = 1;

  // Short title for this change.
  // Example: "database upgrade"
  string title = 2;

  // The current status of this change. This is changed by the lifecycle
  // functions such as `StartChange` and `EndChange`.
  ChangeStatus status = 3;

  // Link to the ticket for this change.
  // Example: "http://jira.contoso-engineering.com/browse/CM-1337"
  string ticketLink = 4;

  // timestamp when this change was created
  google.protobuf.Timestamp createdAt = 5;

  // The name of the user that created the change
  string creatorName = 6;

  // I'm going to omit the creatorLink for now, since it's not clear what it
  // should be
  // string creatorLink = 7;

  // The number of apps that will be affected by this change
  int32 numAffectedApps = 8;

  // The number of items in the blast radius of this change
  int32 numAffectedItems = 9;

  // The number of edges in the blast radius of this change
  int32 numAffectedEdges = 10;

  // The number of low risks in this change
  int32 numLowRisk = 11;

  // The number of medium risks in this change
  int32 numMediumRisk = 12;

  // The number of high risks in this change
  int32 numHighRisk = 13;
}

// a complete Change with machine-supplied and user-supplied values
message Change {
  // machine-generated metadata of this change
  ChangeMetadata metadata = 1;

  // user-supplied properties of this change
  ChangeProperties properties = 2;
}

// machine-generated metadata of this change
message ChangeMetadata {
  // unique id to identify this change
  bytes UUID = 1;

  // timestamp when this change was created
  google.protobuf.Timestamp createdAt = 2;

  // timestamp when this change was last updated
  google.protobuf.Timestamp updatedAt = 3;

  // The current status of this change. This is changed by the lifecycle
  // functions such as `StartChange` and `EndChange`.
  ChangeStatus status = 4;

  // The name of the user that created the change
  string creatorName = 5;

  // The number of apps that will be affected by this change
  int32 numAffectedApps = 6;

  // The number of items in the blast radius if this change
  int32 numAffectedItems = 7;

  // The number of edges in the blast radius if this change
  int32 numAffectedEdges = 17;

  // I'm going to omit the creatorLink for now, since it's not clear what it
  // should be
  // string creatorLink = 7;

  // The number of items within the blast radius that were not affected by this
  // change
  int32 numUnchangedItems = 8;

  // The number of items that were created as part of this change
  int32 numCreatedItems = 9;

  // The number of items that were updated as part of this change
  int32 numUpdatedItems = 10;

  // The number of items that were replaced as part of this change
  int32 numReplacedItems = 18;

  // The number of items that were deleted as part of this change
  int32 numDeletedItems = 11;

  // Represents the current state of a given health state, and the amount that
  // it has changed. This doesn't just look at the change in total number of
  // items, but also the number of items that have been added and removed, even
  // if they were to add to the same number
  message HealthChange {
    // The number of items that were added to this health state as part of the
    // change
    int32 added = 1;
    // The number of items that were removed them this health state as part of
    // the change
    int32 removed = 2;
    // The final number of items that were in this health state
    int32 finalTotal = 3;
  }

  HealthChange UnknownHealthChange = 12;
  HealthChange OkHealthChange = 13;
  HealthChange WarningHealthChange = 14;
  HealthChange ErrorHealthChange = 15;
  HealthChange PendingHealthChange = 16;

  // The status of the risk calculation
  RiskCalculationStatus riskCalculationStatus = 19;

  // The risks that are related to this change
  repeated Risk risks = 20;

  // The number of low risks in this change
  int32 numLowRisk = 21;

  // The number of medium risks in this change
  int32 numMediumRisk = 22;

  // The number of high risks in this change
  int32 numHighRisk = 23;

  // A list of references to the items that taken into account when calculating
  // risks. Due to inherent limitations in the way we calculate risks, for large
  // changes we might need to consider only a subset of the blast radius. This
  // means that risks might be missed if they relate to items that weren't
  // considered. This list is used to show the user which items were considered,
  // and which were not.
  repeated Reference sampledItemsForRiskCalculation = 24;
}

// user-supplied properties of this change
message ChangeProperties {
  reserved 1;

  // Short title for this change.
  // Example: "database upgrade"
  string title = 2;

  // Quick description of the change.
  // Example: "upgrade of the database to get access to the new contoso management processor"
  string description = 3;

  // Link to the ticket for this change.
  // Example: "http://jira.contoso-engineering.com/browse/CM-1337"
  string ticketLink = 4;

  // The owner of this change.
  // Example: Susan
  string owner = 5;

  // A comma-separated list of emails to keep updated with the status of this change.
  // Example: susan@contoso.com, jimmy@contoso.com
  string ccEmails = 6;

  // UUID of a bookmark for the item queries of the items *directly* affected by
  // this change. This might be parsed from a terraform plam, added from the API,
  // parsed from a freeform ticket description etc.
  bytes changingItemsBookmarkUUID = 7;

  // UUID of a snapshot for the item queries of the items *indirectly* affected
  // by this change i.e. the blast radius. The initial selection will be determined
  // automatically based off changingItemsBookmark, but can refined by the user.
  bytes blastRadiusSnapshotUUID = 11;

  // UUID of the whole-system snapshot created before the change has started.
  bytes systemBeforeSnapshotUUID = 8;

  // UUID of the whole-system snapshot created after the change has finished.
  bytes systemAfterSnapshotUUID = 9;

  // list of UUIDs for apps affected by this change.
  repeated bytes affectedAppsUUID = 10;

  // a list of item diffs that were planned to be changed as part of this change. For all items that we could map, the ItemDiff.Reference will be set to the actual item found.
  repeated ItemDiff plannedChanges = 12;

  // The raw plan output for calculating the change's risks.
  string rawPlan = 13;

  // The code changes of this change for calculating the change's risks.
  string codeChanges = 14;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// list all changes
message ListChangesRequest {}

message ListChangesResponse {
  repeated changes.Change changes = 1;
}

// list all changes in a specific status
message ListChangesByStatusRequest {
  ChangeStatus status = 1;
}

message ListChangesByStatusResponse {
  repeated changes.Change changes = 1;
}

// create a new change
message CreateChangeRequest {
  changes.ChangeProperties properties = 1;
}

message CreateChangeResponse {
  changes.Change change = 1;
}

// get the details of a specific change
message GetChangeRequest {
  bytes UUID = 1;
}

message GetChangeResponse {
  changes.Change change = 1;
}

// update an existing change
message UpdateChangeRequest {
  bytes UUID = 1;
  changes.ChangeProperties properties = 2;
}

message UpdateChangeResponse {
  changes.Change change = 1;
}

// delete a change
message DeleteChangeRequest {
  bytes UUID = 1;
}

message DeleteChangeResponse {}

message RefreshStateRequest {}

message RefreshStateResponse {}

message CalculateBlastRadiusRequest {
  // ID of the change to calculate the blast radius for.
  bytes changeUUID = 1;
  // If true, the blast radius will be calculated again, even if it was already.
  // Otherwise if the blast radius has already been calculated (i.e. the status
  // is `DEFINING` and `blastRadiusBookmarkUUID` is set) an error will be
  // returned.
  bool force = 2;
}

message CalculateBlastRadiusResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // The blast radius is being calculated.
    STATE_DISCOVERING = 1;
    // The blast radius has been calculated and is being saved
    STATE_SAVING = 2;
    // Determining which apps are within the blast radius
    STATE_FINDING_APPS = 3;
    // Everything is complete
    STATE_DONE = 4;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 numEdges = 3;

  // If we wanted to display the graph as it loads (which would be pretty cool)
  // we could do something like the below. For now it's out of scope for AWS
  // summit as we're not going to get the time
  // oneof response_type {
  //   Item newItem = 2; // A new item that has been discovered
  //   Edge newEdge = 3; // A new edge between two items
  // }
}

message StartChangeRequest {
  bytes changeUUID = 1;
}

message StartChangeResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // Snapshot is being taken
    STATE_TAKING_SNAPSHOT = 1;
    // Snapshot is being saved
    STATE_SAVING_SNAPSHOT = 2;
    // Everything is complete
    STATE_DONE = 3;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 NumEdges = 3;
}

message EndChangeRequest {
  bytes changeUUID = 1;
}

message EndChangeResponse {
  enum State {
    // No state has been specified
    STATE_UNSPECIFIED = 0;
    // Snapshot is being taken
    STATE_TAKING_SNAPSHOT = 1;
    // Snapshot is being saved
    STATE_SAVING_SNAPSHOT = 2;
    // Everything is complete
    STATE_DONE = 3;
  }

  State state = 1;

  uint32 numItems = 2;
  uint32 NumEdges = 3;
}

////////////////
// Onboarding //
////////////////

enum OnboardingStatus {
  ONBOARDING_STATUS_UNSPECIFIED = 0;
  ONBOARDING_STATUS_ADD_AWS_ACCOUNT = 1;
  ONBOARDING_STATUS_ADD_APP = 2;
  ONBOARDING_STATUS_CREATE_CHANGE = 3;
  ONBOARDING_STATUS_SIMULATE_CHANGE = 4;
  ONBOARDING_STATUS_DONE = 5;
}

// complete Onboarding information with machine-supplied and user-supplied values
message Onboarding {
  // machine-generated metadata of this onboarding info
  OnboardingMetadata metadata = 1;

  // user-supplied properties of this onboarding info
  OnboardingProperties properties = 2;
}

// machine-generated metadata of this onboarding info
message OnboardingMetadata {
  // timestamp when this onboarding info was created
  google.protobuf.Timestamp created = 2;

  // whether or not the user already has an AWS source configured
  bool hasAwsSource = 3;
}

// user-supplied properties of this onboarding info
message OnboardingProperties {
  // The current status of this onboarding info.
  OnboardingStatus status = 1;

  // The UUID for the aws-source that was configured as part of onboarding
  bytes awsSourceUUID = 2;

  // The UUID of the app that was created as part of onboarding
  bytes appUUID = 3;

  // The UUID of the change that was created as part of onboarding
  bytes changeUUID = 4;

  reserved 5;
}

////////////////////////////
// Requests and Responses //
////////////////////////////

// get the onboarding status
message GetOnboardingRequest {}

message GetOnboardingResponse {
  changes.Onboarding onboarding = 1;
}

// update onboarding status
message UpdateOnboardingRequest {
  changes.OnboardingProperties properties = 2;
}

message UpdateOnboardingResponse {
  changes.Onboarding onboarding = 1;
}

message SimulateChangeRequest {
  // The ID of the change to simulate
  bytes changeUUID = 1;
}

message SimulateChangeResponse {
  // Whether the simulation is complete
  bool done = 1;

  // How far through the simulation process we are. This will be pretty
  // apprioximate as it's not expected to take very long and is more to give the
  // sense of progress than to be an accurate measure
  uint32 percentComplete = 2;
}

/////////////
//  Risks  //
/////////////

message Risk {
  enum Severity {
    SEVERITY_UNSPECIFIED = 0;
    SEVERITY_LOW = 1;
    SEVERITY_MEDIUM = 2;
    SEVERITY_HIGH = 3;
  }

  bytes UUID = 5;
  string title = 1;
  Severity severity = 2;
  string description = 3;
  repeated Reference relatedItems = 4;
}

message RiskCalculationStatus {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_INPROGRESS = 1;
    STATUS_SKIPPED = 2;
    STATUS_DONE = 3;
    STATUS_ERROR = 4;
  }

  Status status = 1;

  // A message that should be rendered along with the status. This won't be
  // shown when the status is `STATUS_DONE` since nothing went wrong. But other
  // status could show this message e.g. if a calculation was skipped because
  // the user opted out or didn't have enough credits
  string message = 2;
}

////////////////
//  Archival  //
////////////////

message ChangeArchive {
  Change Change = 1;
  optional bookmarks.Bookmark changingItemsBookmark = 2;
  optional snapshots.Snapshot blastRadiusSnapshot = 3;
  optional snapshots.Snapshot systemBeforeSnapshot = 4;
  optional snapshots.Snapshot systemAfterSnapshot = 5;
  repeated App affectedApps = 6;
  repeated ChangeTimelineEntry timeline = 7;
}

message GetChangeArchiveRequest {
  bytes UUID = 1;
}

message GetChangeArchiveResponse {
  ChangeArchive changeArchive = 1;
}
