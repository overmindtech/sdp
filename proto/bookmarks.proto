syntax = "proto3";

import "google/protobuf/timestamp.proto";


// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________
//         ___\///////////_____\////////////_____\///______________
option go_package = "github.com/overmindtech/sdp/go/sdp";


///////////////////////////////////////////////////////////////////////////////
// bookmark handling
//
// the gateway can store, retrieve, list and delete bookmarks of queries
///////////////////////////////////////////////////////////////////////////////

// Descriptor for a bookmark
message BookmarkDescriptor {
    // unique id to identify this bookmark
    bytes UUID = 1;
    // timestamp when this bookmark was created
    google.protobuf.Timestamp created = 2;
    // user supplied name of this bookmark
    string name = 3;
    // user supplied description of this bookmark
    string description = 4;
    // number of items in this bookmark
    uint32 size = 5;
}

// Retrieve the list of stored query bookmarks for the currently active account.
// Returns a BookmarkList
message ListBookmarksRequest {
    // TODO: pagination
}

// response format for ListBookmarks
message ListBookmarkResponse {
    bool success = 1;
    string errorMessage = 2;
    repeated BookmarkDescriptor bookmarks = 3;
}

// Ask the gateway to store the current state as bookmark with the specified details.
// Returns a BookmarkStored message when the bookmark is stored
message StoreBookmarkRequest {
    // user supplied name of this bookmark
    string name = 1;
    // user supplied description of this bookmark
    string description = 2;
}

// After a bookmark is successfully stored, this reply with the new bookmark's details is sent.
message StoreBookmarkResponse {
    bool success = 1;
    string errorMessage = 2;
    BookmarkDescriptor bookmark = 3;
}

message UpdateBookmarkRequest {
    // unique id to identify this bookmark
    bytes UUID = 1;
    // user supplied name of this bookmark
    string name = 2;
    // user supplied description of this bookmark
    string description = 3;
}

// After a bookmark is successfully updated, this reply with the new bookmark's details is sent.
message UpdateBookmarkResponse {
    bool success = 1;
    string errorMessage = 2;
    BookmarkDescriptor bookmark = 3;
}



// Ask the gateway to load the specified bookmark into the current state.
// Results are streamed to the client in the same way query results are.
message LoadBookmarkRequest {
    // unique id of the bookmark to load
    bytes UUID = 1;
}

message LoadBookmarkResponse {
    bool success = 1;
    string errorMessage = 2;
}

// Delete the bookmark with the specified ID.
message DeleteBookmarkRequest {
    // unique id of the bookmark to delete
    bytes UUID = 1;
}

message DeleteBookmarkResponse {
    bool success = 1;
    string errorMessage = 2;
}
