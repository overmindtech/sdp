/*
bookmarks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overmind

import (
	"encoding/json"
)

// checks if the BookmarkListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarkListResult{}

// BookmarkListResult struct for BookmarkListResult
type BookmarkListResult struct {
	Success *bool `json:"success,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Bookmarks []BookmarkDescriptor `json:"bookmarks,omitempty"`
}

// NewBookmarkListResult instantiates a new BookmarkListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarkListResult() *BookmarkListResult {
	this := BookmarkListResult{}
	return &this
}

// NewBookmarkListResultWithDefaults instantiates a new BookmarkListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarkListResultWithDefaults() *BookmarkListResult {
	this := BookmarkListResult{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *BookmarkListResult) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkListResult) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *BookmarkListResult) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *BookmarkListResult) SetSuccess(v bool) {
	o.Success = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *BookmarkListResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkListResult) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *BookmarkListResult) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *BookmarkListResult) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetBookmarks returns the Bookmarks field value if set, zero value otherwise.
func (o *BookmarkListResult) GetBookmarks() []BookmarkDescriptor {
	if o == nil || IsNil(o.Bookmarks) {
		var ret []BookmarkDescriptor
		return ret
	}
	return o.Bookmarks
}

// GetBookmarksOk returns a tuple with the Bookmarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkListResult) GetBookmarksOk() ([]BookmarkDescriptor, bool) {
	if o == nil || IsNil(o.Bookmarks) {
		return nil, false
	}
	return o.Bookmarks, true
}

// HasBookmarks returns a boolean if a field has been set.
func (o *BookmarkListResult) HasBookmarks() bool {
	if o != nil && !IsNil(o.Bookmarks) {
		return true
	}

	return false
}

// SetBookmarks gets a reference to the given []BookmarkDescriptor and assigns it to the Bookmarks field.
func (o *BookmarkListResult) SetBookmarks(v []BookmarkDescriptor) {
	o.Bookmarks = v
}

func (o BookmarkListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarkListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.Bookmarks) {
		toSerialize["bookmarks"] = o.Bookmarks
	}
	return toSerialize, nil
}

type NullableBookmarkListResult struct {
	value *BookmarkListResult
	isSet bool
}

func (v NullableBookmarkListResult) Get() *BookmarkListResult {
	return v.value
}

func (v *NullableBookmarkListResult) Set(val *BookmarkListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarkListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarkListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarkListResult(val *BookmarkListResult) *NullableBookmarkListResult {
	return &NullableBookmarkListResult{value: val, isSet: true}
}

func (v NullableBookmarkListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarkListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


