/*
bookmarks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overmind

import (
	"encoding/json"
	"time"
)

// checks if the BookmarkDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarkDescriptor{}

// BookmarkDescriptor struct for BookmarkDescriptor
type BookmarkDescriptor struct {
	UUID *string `json:"UUID,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewBookmarkDescriptor instantiates a new BookmarkDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarkDescriptor() *BookmarkDescriptor {
	this := BookmarkDescriptor{}
	return &this
}

// NewBookmarkDescriptorWithDefaults instantiates a new BookmarkDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarkDescriptorWithDefaults() *BookmarkDescriptor {
	this := BookmarkDescriptor{}
	return &this
}

// GetUUID returns the UUID field value if set, zero value otherwise.
func (o *BookmarkDescriptor) GetUUID() string {
	if o == nil || IsNil(o.UUID) {
		var ret string
		return ret
	}
	return *o.UUID
}

// GetUUIDOk returns a tuple with the UUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkDescriptor) GetUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.UUID) {
		return nil, false
	}
	return o.UUID, true
}

// HasUUID returns a boolean if a field has been set.
func (o *BookmarkDescriptor) HasUUID() bool {
	if o != nil && !IsNil(o.UUID) {
		return true
	}

	return false
}

// SetUUID gets a reference to the given string and assigns it to the UUID field.
func (o *BookmarkDescriptor) SetUUID(v string) {
	o.UUID = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *BookmarkDescriptor) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkDescriptor) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *BookmarkDescriptor) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *BookmarkDescriptor) SetCreated(v time.Time) {
	o.Created = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BookmarkDescriptor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkDescriptor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BookmarkDescriptor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BookmarkDescriptor) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BookmarkDescriptor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkDescriptor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BookmarkDescriptor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BookmarkDescriptor) SetDescription(v string) {
	o.Description = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BookmarkDescriptor) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarkDescriptor) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BookmarkDescriptor) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BookmarkDescriptor) SetSize(v int64) {
	o.Size = &v
}

func (o BookmarkDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarkDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UUID) {
		toSerialize["UUID"] = o.UUID
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableBookmarkDescriptor struct {
	value *BookmarkDescriptor
	isSet bool
}

func (v NullableBookmarkDescriptor) Get() *BookmarkDescriptor {
	return v.value
}

func (v *NullableBookmarkDescriptor) Set(val *BookmarkDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarkDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarkDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarkDescriptor(val *BookmarkDescriptor) *NullableBookmarkDescriptor {
	return &NullableBookmarkDescriptor{value: val, isSet: true}
}

func (v NullableBookmarkDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarkDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


