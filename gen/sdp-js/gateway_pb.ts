// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension=.ts"
// @generated from file gateway.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { CancelQuery, Edge, Expand, Item, Query, QueryError, Reference, UndoExpand, UndoQuery } from "./items_pb.ts";
import { DeleteSnapshot, ListSnapshots, LoadSnapshot, SnapshotDeleteResult, SnapshotListResult, SnapshotLoadResult, SnapshotStoreResult, StoreSnapshot } from "./snapshots_pb.ts";
import { BookmarkDeleteResult, BookmarkListResult, BookmarkLoadResult, BookmarkStoreResult, DeleteBookmark, ListBookmarks, LoadBookmark, StoreBookmark } from "./bookmarks_pb.ts";
import { ResponderState } from "./responses_pb.ts";

/**
 * A union of all request made to the gateway.
 *
 * @generated from message GatewayRequest
 */
export class GatewayRequest extends Message<GatewayRequest> {
  /**
   * @generated from oneof GatewayRequest.request_type
   */
  requestType: {
    /**
     * Adds a new query for items to the session, starting it immediately
     *
     * @generated from field: Query query = 1;
     */
    value: Query;
    case: "query";
  } | {
    /**
     * Cancel a running query
     *
     * @generated from field: CancelQuery cancelQuery = 3;
     */
    value: CancelQuery;
    case: "cancelQuery";
  } | {
    /**
     * Undo the specified query, if it was the last query received by the gateway. This removes it and all of its effects from the session
     *
     * @generated from field: UndoQuery undoQuery = 4;
     */
    value: UndoQuery;
    case: "undoQuery";
  } | {
    /**
     * Expand all linked items for the given item
     *
     * @generated from field: Expand expand = 7;
     */
    value: Expand;
    case: "expand";
  } | {
    /**
     * Undo the specified item expansion
     *
     * TODO: CancelExpand?
     *
     * @generated from field: UndoExpand undoExpand = 8;
     */
    value: UndoExpand;
    case: "undoExpand";
  } | {
    /**
     * return the list of snapshots for this account
     *
     * @generated from field: ListSnapshots listSnapshots = 9;
     */
    value: ListSnapshots;
    case: "listSnapshots";
  } | {
    /**
     * store the current session state as snapshot
     *
     * @generated from field: StoreSnapshot storeSnapshot = 10;
     */
    value: StoreSnapshot;
    case: "storeSnapshot";
  } | {
    /**
     * load a snapshot into the current state
     *
     * @generated from field: LoadSnapshot loadSnapshot = 11;
     */
    value: LoadSnapshot;
    case: "loadSnapshot";
  } | {
    /**
     * delete a snapshot from the underlying storage
     *
     * TODO: implement?
     * // cancel the loading of a snapshot
     * CancelLoadSnapshot cancelLoadSnapshot = ??;
     * // undo the loading of a snapshot
     * UndoLoadSnapshot undoLoadSnapshot = ??;
     *
     * @generated from field: DeleteSnapshot deleteSnapshot = 12;
     */
    value: DeleteSnapshot;
    case: "deleteSnapshot";
  } | {
    /**
     * return the list of bookmarks for this account
     *
     * @generated from field: ListBookmarks listBookmarks = 13;
     */
    value: ListBookmarks;
    case: "listBookmarks";
  } | {
    /**
     * store the current set of queries as bookmarks
     *
     * @generated from field: StoreBookmark storeBookmark = 14;
     */
    value: StoreBookmark;
    case: "storeBookmark";
  } | {
    /**
     * load and execute a bookmark into the current state
     *
     * @generated from field: LoadBookmark loadBookmark = 15;
     */
    value: LoadBookmark;
    case: "loadBookmark";
  } | {
    /**
     * delete a bookmark from the underlying storage
     *
     * TODO: implement?
     * // cancel the loading of a Bookmark
     * CancelLoadBookmark cancelLoadBookmark = ??;
     * // undo the loading of a Bookmark
     * UndoLoadBookmark undoLoadBookmark = ??;
     *
     * @generated from field: DeleteBookmark deleteBookmark = 16;
     */
    value: DeleteBookmark;
    case: "deleteBookmark";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Minimum time between status updates. Setting this value too low can result in too many status messages
   *
   * @generated from field: optional google.protobuf.Duration minStatusInterval = 2;
   */
  minStatusInterval?: Duration;

  constructor(data?: PartialMessage<GatewayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GatewayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: Query, oneof: "request_type" },
    { no: 3, name: "cancelQuery", kind: "message", T: CancelQuery, oneof: "request_type" },
    { no: 4, name: "undoQuery", kind: "message", T: UndoQuery, oneof: "request_type" },
    { no: 7, name: "expand", kind: "message", T: Expand, oneof: "request_type" },
    { no: 8, name: "undoExpand", kind: "message", T: UndoExpand, oneof: "request_type" },
    { no: 9, name: "listSnapshots", kind: "message", T: ListSnapshots, oneof: "request_type" },
    { no: 10, name: "storeSnapshot", kind: "message", T: StoreSnapshot, oneof: "request_type" },
    { no: 11, name: "loadSnapshot", kind: "message", T: LoadSnapshot, oneof: "request_type" },
    { no: 12, name: "deleteSnapshot", kind: "message", T: DeleteSnapshot, oneof: "request_type" },
    { no: 13, name: "listBookmarks", kind: "message", T: ListBookmarks, oneof: "request_type" },
    { no: 14, name: "storeBookmark", kind: "message", T: StoreBookmark, oneof: "request_type" },
    { no: 15, name: "loadBookmark", kind: "message", T: LoadBookmark, oneof: "request_type" },
    { no: 16, name: "deleteBookmark", kind: "message", T: DeleteBookmark, oneof: "request_type" },
    { no: 2, name: "minStatusInterval", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayRequest {
    return new GatewayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayRequest {
    return new GatewayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayRequest {
    return new GatewayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GatewayRequest | PlainMessage<GatewayRequest> | undefined, b: GatewayRequest | PlainMessage<GatewayRequest> | undefined): boolean {
    return proto3.util.equals(GatewayRequest, a, b);
  }
}

/**
 * The gateway will always respond with this type of message,
 * however the purpose of it is purely as a wrapper to the many different types
 * of messages that the gateway can send
 *
 * @generated from message GatewayResponse
 */
export class GatewayResponse extends Message<GatewayResponse> {
  /**
   * @generated from oneof GatewayResponse.response_type
   */
  responseType: {
    /**
     * A new item that has been discovered
     *
     * @generated from field: Item newItem = 2;
     */
    value: Item;
    case: "newItem";
  } | {
    /**
     * A new edge between two items
     *
     * @generated from field: Edge newEdge = 3;
     */
    value: Edge;
    case: "newEdge";
  } | {
    /**
     * Status of the overall request
     *
     * @generated from field: GatewayRequestStatus status = 4;
     */
    value: GatewayRequestStatus;
    case: "status";
  } | {
    /**
     * An error that means the request couldn't be executed
     *
     * @generated from field: string error = 5;
     */
    value: string;
    case: "error";
  } | {
    /**
     * A new error that was encountered as part of a query
     *
     * @generated from field: QueryError queryError = 6;
     */
    value: QueryError;
    case: "queryError";
  } | {
    /**
     * An item that should be deleted from local state
     *
     * @generated from field: Reference deleteItem = 7;
     */
    value: Reference;
    case: "deleteItem";
  } | {
    /**
     * An edge that should be deleted form local state
     *
     * @generated from field: Edge deleteEdge = 8;
     */
    value: Edge;
    case: "deleteEdge";
  } | {
    /**
     * An item that has already been sent, but contains new data, it should be updated to reflect this version
     *
     * @generated from field: Item updateItem = 9;
     */
    value: Item;
    case: "updateItem";
  } | {
    /**
     * @generated from field: SnapshotListResult snapshotListResult = 10;
     */
    value: SnapshotListResult;
    case: "snapshotListResult";
  } | {
    /**
     * @generated from field: SnapshotStoreResult snapshotStoreResult = 11;
     */
    value: SnapshotStoreResult;
    case: "snapshotStoreResult";
  } | {
    /**
     * @generated from field: SnapshotLoadResult snapshotLoadResult = 12;
     */
    value: SnapshotLoadResult;
    case: "snapshotLoadResult";
  } | {
    /**
     * @generated from field: SnapshotDeleteResult snapshotDeleteResult = 13;
     */
    value: SnapshotDeleteResult;
    case: "snapshotDeleteResult";
  } | {
    /**
     * @generated from field: BookmarkListResult bookmarkListResult = 14;
     */
    value: BookmarkListResult;
    case: "bookmarkListResult";
  } | {
    /**
     * @generated from field: BookmarkStoreResult bookmarkStoreResult = 15;
     */
    value: BookmarkStoreResult;
    case: "bookmarkStoreResult";
  } | {
    /**
     * @generated from field: BookmarkLoadResult bookmarkLoadResult = 16;
     */
    value: BookmarkLoadResult;
    case: "bookmarkLoadResult";
  } | {
    /**
     * @generated from field: BookmarkDeleteResult bookmarkDeleteResult = 17;
     */
    value: BookmarkDeleteResult;
    case: "bookmarkDeleteResult";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GatewayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GatewayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "newItem", kind: "message", T: Item, oneof: "response_type" },
    { no: 3, name: "newEdge", kind: "message", T: Edge, oneof: "response_type" },
    { no: 4, name: "status", kind: "message", T: GatewayRequestStatus, oneof: "response_type" },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response_type" },
    { no: 6, name: "queryError", kind: "message", T: QueryError, oneof: "response_type" },
    { no: 7, name: "deleteItem", kind: "message", T: Reference, oneof: "response_type" },
    { no: 8, name: "deleteEdge", kind: "message", T: Edge, oneof: "response_type" },
    { no: 9, name: "updateItem", kind: "message", T: Item, oneof: "response_type" },
    { no: 10, name: "snapshotListResult", kind: "message", T: SnapshotListResult, oneof: "response_type" },
    { no: 11, name: "snapshotStoreResult", kind: "message", T: SnapshotStoreResult, oneof: "response_type" },
    { no: 12, name: "snapshotLoadResult", kind: "message", T: SnapshotLoadResult, oneof: "response_type" },
    { no: 13, name: "snapshotDeleteResult", kind: "message", T: SnapshotDeleteResult, oneof: "response_type" },
    { no: 14, name: "bookmarkListResult", kind: "message", T: BookmarkListResult, oneof: "response_type" },
    { no: 15, name: "bookmarkStoreResult", kind: "message", T: BookmarkStoreResult, oneof: "response_type" },
    { no: 16, name: "bookmarkLoadResult", kind: "message", T: BookmarkLoadResult, oneof: "response_type" },
    { no: 17, name: "bookmarkDeleteResult", kind: "message", T: BookmarkDeleteResult, oneof: "response_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayResponse {
    return new GatewayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayResponse {
    return new GatewayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayResponse {
    return new GatewayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GatewayResponse | PlainMessage<GatewayResponse> | undefined, b: GatewayResponse | PlainMessage<GatewayResponse> | undefined): boolean {
    return proto3.util.equals(GatewayResponse, a, b);
  }
}

/**
 * Contains the status of the gateway request.
 *
 * @generated from message GatewayRequestStatus
 */
export class GatewayRequestStatus extends Message<GatewayRequestStatus> {
  /**
   * @generated from field: map<string, ResponderState> responderStates = 1;
   */
  responderStates: { [key: string]: ResponderState } = {};

  /**
   * @generated from field: GatewayRequestStatus.Summary summary = 3;
   */
  summary?: GatewayRequestStatus_Summary;

  /**
   * Whether all items have finished being processed by the gateway. It is
   * possible for all responders to be complete, but the gateway is still
   * working. A request should only be considered complete when all working ==
   * 0 and postProcessingComplete == true
   *
   * @generated from field: bool postProcessingComplete = 4;
   */
  postProcessingComplete = false;

  constructor(data?: PartialMessage<GatewayRequestStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GatewayRequestStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responderStates", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(ResponderState)} },
    { no: 3, name: "summary", kind: "message", T: GatewayRequestStatus_Summary },
    { no: 4, name: "postProcessingComplete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayRequestStatus {
    return new GatewayRequestStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayRequestStatus {
    return new GatewayRequestStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayRequestStatus {
    return new GatewayRequestStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GatewayRequestStatus | PlainMessage<GatewayRequestStatus> | undefined, b: GatewayRequestStatus | PlainMessage<GatewayRequestStatus> | undefined): boolean {
    return proto3.util.equals(GatewayRequestStatus, a, b);
  }
}

/**
 * @generated from message GatewayRequestStatus.Summary
 */
export class GatewayRequestStatus_Summary extends Message<GatewayRequestStatus_Summary> {
  /**
   * @generated from field: int32 working = 1;
   */
  working = 0;

  /**
   * @generated from field: int32 stalled = 2;
   */
  stalled = 0;

  /**
   * @generated from field: int32 complete = 3;
   */
  complete = 0;

  /**
   * @generated from field: int32 error = 4;
   */
  error = 0;

  /**
   * @generated from field: int32 cancelled = 5;
   */
  cancelled = 0;

  /**
   * @generated from field: int32 responders = 6;
   */
  responders = 0;

  constructor(data?: PartialMessage<GatewayRequestStatus_Summary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GatewayRequestStatus.Summary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "working", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "stalled", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "complete", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "cancelled", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "responders", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayRequestStatus_Summary {
    return new GatewayRequestStatus_Summary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayRequestStatus_Summary {
    return new GatewayRequestStatus_Summary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayRequestStatus_Summary {
    return new GatewayRequestStatus_Summary().fromJsonString(jsonString, options);
  }

  static equals(a: GatewayRequestStatus_Summary | PlainMessage<GatewayRequestStatus_Summary> | undefined, b: GatewayRequestStatus_Summary | PlainMessage<GatewayRequestStatus_Summary> | undefined): boolean {
    return proto3.util.equals(GatewayRequestStatus_Summary, a, b);
  }
}

