// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: bookmarks.proto

package sdp_go

import (
	_ "github.com/overmindtech/sdp/gen/sdp-go/google/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Descriptor for a bookmark
type BookmarkDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id to identify this bookmark
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// timestamp when this bookmark was created
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// user supplied name of this bookmark
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// user supplied description of this bookmark
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// number of items in this bookmark
	Size uint32 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *BookmarkDescriptor) Reset() {
	*x = BookmarkDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkDescriptor) ProtoMessage() {}

func (x *BookmarkDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkDescriptor.ProtoReflect.Descriptor instead.
func (*BookmarkDescriptor) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{0}
}

func (x *BookmarkDescriptor) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *BookmarkDescriptor) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *BookmarkDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BookmarkDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BookmarkDescriptor) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Retrieve the list of stored query bookmarks for the currently active account.
// Returns a BookmarkList
type ListBookmarks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBookmarks) Reset() {
	*x = ListBookmarks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBookmarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookmarks) ProtoMessage() {}

func (x *ListBookmarks) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookmarks.ProtoReflect.Descriptor instead.
func (*ListBookmarks) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{1}
}

// response format for ListBookmarks
type BookmarkListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string                `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	Bookmarks    []*BookmarkDescriptor `protobuf:"bytes,3,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
}

func (x *BookmarkListResult) Reset() {
	*x = BookmarkListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkListResult) ProtoMessage() {}

func (x *BookmarkListResult) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkListResult.ProtoReflect.Descriptor instead.
func (*BookmarkListResult) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{2}
}

func (x *BookmarkListResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkListResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BookmarkListResult) GetBookmarks() []*BookmarkDescriptor {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

// Ask the gateway to store the current state as bookmark with the specified details.
// Returns a BookmarkStored message when the bookmark is stored
type StoreBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user supplied name of this bookmark
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// user supplied description of this bookmark
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *StoreBookmark) Reset() {
	*x = StoreBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBookmark) ProtoMessage() {}

func (x *StoreBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBookmark.ProtoReflect.Descriptor instead.
func (*StoreBookmark) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{3}
}

func (x *StoreBookmark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreBookmark) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// After a bookmark is successfully stored, this reply with the new bookmark's details is sent.
type BookmarkStoreResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string              `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	Bookmark     *BookmarkDescriptor `protobuf:"bytes,3,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *BookmarkStoreResult) Reset() {
	*x = BookmarkStoreResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkStoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkStoreResult) ProtoMessage() {}

func (x *BookmarkStoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkStoreResult.ProtoReflect.Descriptor instead.
func (*BookmarkStoreResult) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{4}
}

func (x *BookmarkStoreResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkStoreResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BookmarkStoreResult) GetBookmark() *BookmarkDescriptor {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

// Ask the gateway to load the specified bookmark into the current state.
// Results are streamed to the client in the same way query results are.
type LoadBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the bookmark to load
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *LoadBookmark) Reset() {
	*x = LoadBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBookmark) ProtoMessage() {}

func (x *LoadBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBookmark.ProtoReflect.Descriptor instead.
func (*LoadBookmark) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{5}
}

func (x *LoadBookmark) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

type BookmarkLoadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *BookmarkLoadResult) Reset() {
	*x = BookmarkLoadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkLoadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkLoadResult) ProtoMessage() {}

func (x *BookmarkLoadResult) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkLoadResult.ProtoReflect.Descriptor instead.
func (*BookmarkLoadResult) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{6}
}

func (x *BookmarkLoadResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkLoadResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Delete the bookmark with the specified ID.
type DeleteBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the bookmark to delete
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DeleteBookmark) Reset() {
	*x = DeleteBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmark) ProtoMessage() {}

func (x *DeleteBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmark.ProtoReflect.Descriptor instead.
func (*DeleteBookmark) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteBookmark) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

type BookmarkDeleteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *BookmarkDeleteResult) Reset() {
	*x = BookmarkDeleteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bookmarks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkDeleteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkDeleteResult) ProtoMessage() {}

func (x *BookmarkDeleteResult) ProtoReflect() protoreflect.Message {
	mi := &file_bookmarks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkDeleteResult.ProtoReflect.Descriptor instead.
func (*BookmarkDeleteResult) Descriptor() ([]byte, []int) {
	return file_bookmarks_proto_rawDescGZIP(), []int{8}
}

func (x *BookmarkDeleteResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkDeleteResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_bookmarks_proto protoreflect.FileDescriptor

var file_bookmarks_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01,
	0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x45, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x54, 0x0a,
	0x14, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x42, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x3a, 0x42, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x73, 0x64, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x64, 0x70,
	0x2d, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bookmarks_proto_rawDescOnce sync.Once
	file_bookmarks_proto_rawDescData = file_bookmarks_proto_rawDesc
)

func file_bookmarks_proto_rawDescGZIP() []byte {
	file_bookmarks_proto_rawDescOnce.Do(func() {
		file_bookmarks_proto_rawDescData = protoimpl.X.CompressGZIP(file_bookmarks_proto_rawDescData)
	})
	return file_bookmarks_proto_rawDescData
}

var file_bookmarks_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bookmarks_proto_goTypes = []interface{}{
	(*BookmarkDescriptor)(nil),    // 0: BookmarkDescriptor
	(*ListBookmarks)(nil),         // 1: ListBookmarks
	(*BookmarkListResult)(nil),    // 2: BookmarkListResult
	(*StoreBookmark)(nil),         // 3: StoreBookmark
	(*BookmarkStoreResult)(nil),   // 4: BookmarkStoreResult
	(*LoadBookmark)(nil),          // 5: LoadBookmark
	(*BookmarkLoadResult)(nil),    // 6: BookmarkLoadResult
	(*DeleteBookmark)(nil),        // 7: DeleteBookmark
	(*BookmarkDeleteResult)(nil),  // 8: BookmarkDeleteResult
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 10: google.protobuf.Empty
}
var file_bookmarks_proto_depIdxs = []int32{
	9,  // 0: BookmarkDescriptor.created:type_name -> google.protobuf.Timestamp
	0,  // 1: BookmarkListResult.bookmarks:type_name -> BookmarkDescriptor
	0,  // 2: BookmarkStoreResult.bookmark:type_name -> BookmarkDescriptor
	10, // 3: Bookmarks.List:input_type -> google.protobuf.Empty
	2,  // 4: Bookmarks.List:output_type -> BookmarkListResult
	4,  // [4:5] is the sub-list for method output_type
	3,  // [3:4] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_bookmarks_proto_init() }
func file_bookmarks_proto_init() {
	if File_bookmarks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bookmarks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBookmarks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkStoreResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkLoadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bookmarks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkDeleteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bookmarks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bookmarks_proto_goTypes,
		DependencyIndexes: file_bookmarks_proto_depIdxs,
		MessageInfos:      file_bookmarks_proto_msgTypes,
	}.Build()
	File_bookmarks_proto = out.File
	file_bookmarks_proto_rawDesc = nil
	file_bookmarks_proto_goTypes = nil
	file_bookmarks_proto_depIdxs = nil
}
