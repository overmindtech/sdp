// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bookmarks.proto

package sdp_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bookmarks_List_FullMethodName = "/Bookmarks/List"
)

// BookmarksClient is the client API for Bookmarks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarksClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookmarkListResult, error)
}

type bookmarksClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarksClient(cc grpc.ClientConnInterface) BookmarksClient {
	return &bookmarksClient{cc}
}

func (c *bookmarksClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookmarkListResult, error) {
	out := new(BookmarkListResult)
	err := c.cc.Invoke(ctx, Bookmarks_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarksServer is the server API for Bookmarks service.
// All implementations must embed UnimplementedBookmarksServer
// for forward compatibility
type BookmarksServer interface {
	List(context.Context, *emptypb.Empty) (*BookmarkListResult, error)
	mustEmbedUnimplementedBookmarksServer()
}

// UnimplementedBookmarksServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarksServer struct {
}

func (UnimplementedBookmarksServer) List(context.Context, *emptypb.Empty) (*BookmarkListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBookmarksServer) mustEmbedUnimplementedBookmarksServer() {}

// UnsafeBookmarksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarksServer will
// result in compilation errors.
type UnsafeBookmarksServer interface {
	mustEmbedUnimplementedBookmarksServer()
}

func RegisterBookmarksServer(s grpc.ServiceRegistrar, srv BookmarksServer) {
	s.RegisterService(&Bookmarks_ServiceDesc, srv)
}

func _Bookmarks_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarksServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookmarks_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarksServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookmarks_ServiceDesc is the grpc.ServiceDesc for Bookmarks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookmarks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bookmarks",
	HandlerType: (*BookmarksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Bookmarks_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookmarks.proto",
}
