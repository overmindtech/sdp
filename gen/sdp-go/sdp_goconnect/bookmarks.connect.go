// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bookmarks.proto

package sdp_goconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	sdp_go "github.com/overmindtech/sdp/gen/sdp-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookmarksName is the fully-qualified name of the Bookmarks service.
	BookmarksName = "Bookmarks"
)

// BookmarksClient is a client for the Bookmarks service.
type BookmarksClient interface {
	List(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[sdp_go.BookmarkListResult], error)
}

// NewBookmarksClient constructs a client for the Bookmarks service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarksClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookmarksClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookmarksClient{
		list: connect_go.NewClient[emptypb.Empty, sdp_go.BookmarkListResult](
			httpClient,
			baseURL+"/.Bookmarks/List",
			opts...,
		),
	}
}

// bookmarksClient implements BookmarksClient.
type bookmarksClient struct {
	list *connect_go.Client[emptypb.Empty, sdp_go.BookmarkListResult]
}

// List calls Bookmarks.List.
func (c *bookmarksClient) List(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[sdp_go.BookmarkListResult], error) {
	return c.list.CallUnary(ctx, req)
}

// BookmarksHandler is an implementation of the Bookmarks service.
type BookmarksHandler interface {
	List(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[sdp_go.BookmarkListResult], error)
}

// NewBookmarksHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarksHandler(svc BookmarksHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.Bookmarks/List", connect_go.NewUnaryHandler(
		"/.Bookmarks/List",
		svc.List,
		opts...,
	))
	return "/.Bookmarks/", mux
}

// UnimplementedBookmarksHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarksHandler struct{}

func (UnimplementedBookmarksHandler) List(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[sdp_go.BookmarkListResult], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("Bookmarks.List is not implemented"))
}
