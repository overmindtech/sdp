// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: gateway.proto

package sdp_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A union of all request made to the gateway.
type GatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*GatewayRequest_Query
	//	*GatewayRequest_CancelQuery
	//	*GatewayRequest_UndoQuery
	//	*GatewayRequest_Expand
	//	*GatewayRequest_UndoExpand
	//	*GatewayRequest_ListSnapshots
	//	*GatewayRequest_StoreSnapshot
	//	*GatewayRequest_LoadSnapshot
	//	*GatewayRequest_DeleteSnapshot
	//	*GatewayRequest_ListBookmarks
	//	*GatewayRequest_StoreBookmark
	//	*GatewayRequest_LoadBookmark
	//	*GatewayRequest_DeleteBookmark
	RequestType       isGatewayRequest_RequestType `protobuf_oneof:"request_type"`
	MinStatusInterval *durationpb.Duration         `protobuf:"bytes,2,opt,name=minStatusInterval,proto3,oneof" json:"minStatusInterval,omitempty"` // Minimum time between status updates. Setting this value too low can result in too many status messages
}

func (x *GatewayRequest) Reset() {
	*x = GatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequest) ProtoMessage() {}

func (x *GatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequest.ProtoReflect.Descriptor instead.
func (*GatewayRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{0}
}

func (m *GatewayRequest) GetRequestType() isGatewayRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *GatewayRequest) GetQuery() *Query {
	if x, ok := x.GetRequestType().(*GatewayRequest_Query); ok {
		return x.Query
	}
	return nil
}

func (x *GatewayRequest) GetCancelQuery() *CancelQuery {
	if x, ok := x.GetRequestType().(*GatewayRequest_CancelQuery); ok {
		return x.CancelQuery
	}
	return nil
}

func (x *GatewayRequest) GetUndoQuery() *UndoQuery {
	if x, ok := x.GetRequestType().(*GatewayRequest_UndoQuery); ok {
		return x.UndoQuery
	}
	return nil
}

func (x *GatewayRequest) GetExpand() *Expand {
	if x, ok := x.GetRequestType().(*GatewayRequest_Expand); ok {
		return x.Expand
	}
	return nil
}

func (x *GatewayRequest) GetUndoExpand() *UndoExpand {
	if x, ok := x.GetRequestType().(*GatewayRequest_UndoExpand); ok {
		return x.UndoExpand
	}
	return nil
}

func (x *GatewayRequest) GetListSnapshots() *ListSnapshots {
	if x, ok := x.GetRequestType().(*GatewayRequest_ListSnapshots); ok {
		return x.ListSnapshots
	}
	return nil
}

func (x *GatewayRequest) GetStoreSnapshot() *StoreSnapshot {
	if x, ok := x.GetRequestType().(*GatewayRequest_StoreSnapshot); ok {
		return x.StoreSnapshot
	}
	return nil
}

func (x *GatewayRequest) GetLoadSnapshot() *LoadSnapshot {
	if x, ok := x.GetRequestType().(*GatewayRequest_LoadSnapshot); ok {
		return x.LoadSnapshot
	}
	return nil
}

func (x *GatewayRequest) GetDeleteSnapshot() *DeleteSnapshot {
	if x, ok := x.GetRequestType().(*GatewayRequest_DeleteSnapshot); ok {
		return x.DeleteSnapshot
	}
	return nil
}

func (x *GatewayRequest) GetListBookmarks() *ListBookmarks {
	if x, ok := x.GetRequestType().(*GatewayRequest_ListBookmarks); ok {
		return x.ListBookmarks
	}
	return nil
}

func (x *GatewayRequest) GetStoreBookmark() *StoreBookmark {
	if x, ok := x.GetRequestType().(*GatewayRequest_StoreBookmark); ok {
		return x.StoreBookmark
	}
	return nil
}

func (x *GatewayRequest) GetLoadBookmark() *LoadBookmark {
	if x, ok := x.GetRequestType().(*GatewayRequest_LoadBookmark); ok {
		return x.LoadBookmark
	}
	return nil
}

func (x *GatewayRequest) GetDeleteBookmark() *DeleteBookmark {
	if x, ok := x.GetRequestType().(*GatewayRequest_DeleteBookmark); ok {
		return x.DeleteBookmark
	}
	return nil
}

func (x *GatewayRequest) GetMinStatusInterval() *durationpb.Duration {
	if x != nil {
		return x.MinStatusInterval
	}
	return nil
}

type isGatewayRequest_RequestType interface {
	isGatewayRequest_RequestType()
}

type GatewayRequest_Query struct {
	// Adds a new query for items to the session, starting it immediately
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type GatewayRequest_CancelQuery struct {
	// Cancel a running query
	CancelQuery *CancelQuery `protobuf:"bytes,3,opt,name=cancelQuery,proto3,oneof"`
}

type GatewayRequest_UndoQuery struct {
	// Undo the specified query, if it was the last query received by the gateway. This removes it and all of its effects from the session
	UndoQuery *UndoQuery `protobuf:"bytes,4,opt,name=undoQuery,proto3,oneof"`
}

type GatewayRequest_Expand struct {
	// Expand all linked items for the given item
	Expand *Expand `protobuf:"bytes,7,opt,name=expand,proto3,oneof"`
}

type GatewayRequest_UndoExpand struct {
	// Undo the specified item expansion
	UndoExpand *UndoExpand `protobuf:"bytes,8,opt,name=undoExpand,proto3,oneof"` // TODO: CancelExpand?
}

type GatewayRequest_ListSnapshots struct {
	// return the list of snapshots for this account
	ListSnapshots *ListSnapshots `protobuf:"bytes,9,opt,name=listSnapshots,proto3,oneof"`
}

type GatewayRequest_StoreSnapshot struct {
	// store the current session state as snapshot
	StoreSnapshot *StoreSnapshot `protobuf:"bytes,10,opt,name=storeSnapshot,proto3,oneof"`
}

type GatewayRequest_LoadSnapshot struct {
	// load a snapshot into the current state
	LoadSnapshot *LoadSnapshot `protobuf:"bytes,11,opt,name=loadSnapshot,proto3,oneof"`
}

type GatewayRequest_DeleteSnapshot struct {
	// delete a snapshot from the underlying storage
	DeleteSnapshot *DeleteSnapshot `protobuf:"bytes,12,opt,name=deleteSnapshot,proto3,oneof"`
}

type GatewayRequest_ListBookmarks struct {
	// return the list of bookmarks for this account
	ListBookmarks *ListBookmarks `protobuf:"bytes,13,opt,name=listBookmarks,proto3,oneof"`
}

type GatewayRequest_StoreBookmark struct {
	// store the current set of queries as bookmarks
	StoreBookmark *StoreBookmark `protobuf:"bytes,14,opt,name=storeBookmark,proto3,oneof"`
}

type GatewayRequest_LoadBookmark struct {
	// load and execute a bookmark into the current state
	LoadBookmark *LoadBookmark `protobuf:"bytes,15,opt,name=loadBookmark,proto3,oneof"`
}

type GatewayRequest_DeleteBookmark struct {
	// delete a bookmark from the underlying storage
	DeleteBookmark *DeleteBookmark `protobuf:"bytes,16,opt,name=deleteBookmark,proto3,oneof"`
}

func (*GatewayRequest_Query) isGatewayRequest_RequestType() {}

func (*GatewayRequest_CancelQuery) isGatewayRequest_RequestType() {}

func (*GatewayRequest_UndoQuery) isGatewayRequest_RequestType() {}

func (*GatewayRequest_Expand) isGatewayRequest_RequestType() {}

func (*GatewayRequest_UndoExpand) isGatewayRequest_RequestType() {}

func (*GatewayRequest_ListSnapshots) isGatewayRequest_RequestType() {}

func (*GatewayRequest_StoreSnapshot) isGatewayRequest_RequestType() {}

func (*GatewayRequest_LoadSnapshot) isGatewayRequest_RequestType() {}

func (*GatewayRequest_DeleteSnapshot) isGatewayRequest_RequestType() {}

func (*GatewayRequest_ListBookmarks) isGatewayRequest_RequestType() {}

func (*GatewayRequest_StoreBookmark) isGatewayRequest_RequestType() {}

func (*GatewayRequest_LoadBookmark) isGatewayRequest_RequestType() {}

func (*GatewayRequest_DeleteBookmark) isGatewayRequest_RequestType() {}

// The gateway will always respond with this type of message,
// however the purpose of it is purely as a wrapper to the many different types
// of messages that the gateway can send
type GatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//
	//	*GatewayResponse_NewItem
	//	*GatewayResponse_NewEdge
	//	*GatewayResponse_Status
	//	*GatewayResponse_Error
	//	*GatewayResponse_QueryError
	//	*GatewayResponse_DeleteItem
	//	*GatewayResponse_DeleteEdge
	//	*GatewayResponse_UpdateItem
	//	*GatewayResponse_SnapshotListResult
	//	*GatewayResponse_SnapshotStoreResult
	//	*GatewayResponse_SnapshotLoadResult
	//	*GatewayResponse_SnapshotDeleteResult
	//	*GatewayResponse_BookmarkListResult
	//	*GatewayResponse_BookmarkStoreResult
	//	*GatewayResponse_BookmarkLoadResult
	//	*GatewayResponse_BookmarkDeleteResult
	ResponseType isGatewayResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *GatewayResponse) Reset() {
	*x = GatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayResponse) ProtoMessage() {}

func (x *GatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayResponse.ProtoReflect.Descriptor instead.
func (*GatewayResponse) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{1}
}

func (m *GatewayResponse) GetResponseType() isGatewayResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *GatewayResponse) GetNewItem() *Item {
	if x, ok := x.GetResponseType().(*GatewayResponse_NewItem); ok {
		return x.NewItem
	}
	return nil
}

func (x *GatewayResponse) GetNewEdge() *Edge {
	if x, ok := x.GetResponseType().(*GatewayResponse_NewEdge); ok {
		return x.NewEdge
	}
	return nil
}

func (x *GatewayResponse) GetStatus() *GatewayRequestStatus {
	if x, ok := x.GetResponseType().(*GatewayResponse_Status); ok {
		return x.Status
	}
	return nil
}

func (x *GatewayResponse) GetError() string {
	if x, ok := x.GetResponseType().(*GatewayResponse_Error); ok {
		return x.Error
	}
	return ""
}

func (x *GatewayResponse) GetQueryError() *QueryError {
	if x, ok := x.GetResponseType().(*GatewayResponse_QueryError); ok {
		return x.QueryError
	}
	return nil
}

func (x *GatewayResponse) GetDeleteItem() *Reference {
	if x, ok := x.GetResponseType().(*GatewayResponse_DeleteItem); ok {
		return x.DeleteItem
	}
	return nil
}

func (x *GatewayResponse) GetDeleteEdge() *Edge {
	if x, ok := x.GetResponseType().(*GatewayResponse_DeleteEdge); ok {
		return x.DeleteEdge
	}
	return nil
}

func (x *GatewayResponse) GetUpdateItem() *Item {
	if x, ok := x.GetResponseType().(*GatewayResponse_UpdateItem); ok {
		return x.UpdateItem
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotListResult() *SnapshotListResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotListResult); ok {
		return x.SnapshotListResult
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotStoreResult() *SnapshotStoreResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotStoreResult); ok {
		return x.SnapshotStoreResult
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotLoadResult() *SnapshotLoadResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotLoadResult); ok {
		return x.SnapshotLoadResult
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotDeleteResult() *SnapshotDeleteResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotDeleteResult); ok {
		return x.SnapshotDeleteResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkListResult() *BookmarkListResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkListResult); ok {
		return x.BookmarkListResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkStoreResult() *BookmarkStoreResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkStoreResult); ok {
		return x.BookmarkStoreResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkLoadResult() *BookmarkLoadResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkLoadResult); ok {
		return x.BookmarkLoadResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkDeleteResult() *BookmarkDeleteResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkDeleteResult); ok {
		return x.BookmarkDeleteResult
	}
	return nil
}

type isGatewayResponse_ResponseType interface {
	isGatewayResponse_ResponseType()
}

type GatewayResponse_NewItem struct {
	NewItem *Item `protobuf:"bytes,2,opt,name=newItem,proto3,oneof"` // A new item that has been discovered
}

type GatewayResponse_NewEdge struct {
	NewEdge *Edge `protobuf:"bytes,3,opt,name=newEdge,proto3,oneof"` // A new edge between two items
}

type GatewayResponse_Status struct {
	Status *GatewayRequestStatus `protobuf:"bytes,4,opt,name=status,proto3,oneof"` // Status of the overall request
}

type GatewayResponse_Error struct {
	Error string `protobuf:"bytes,5,opt,name=error,proto3,oneof"` // An error that means the request couldn't be executed
}

type GatewayResponse_QueryError struct {
	QueryError *QueryError `protobuf:"bytes,6,opt,name=queryError,proto3,oneof"` // A new error that was encountered as part of a query
}

type GatewayResponse_DeleteItem struct {
	DeleteItem *Reference `protobuf:"bytes,7,opt,name=deleteItem,proto3,oneof"` // An item that should be deleted from local state
}

type GatewayResponse_DeleteEdge struct {
	DeleteEdge *Edge `protobuf:"bytes,8,opt,name=deleteEdge,proto3,oneof"` // An edge that should be deleted form local state
}

type GatewayResponse_UpdateItem struct {
	UpdateItem *Item `protobuf:"bytes,9,opt,name=updateItem,proto3,oneof"` // An item that has already been sent, but contains new data, it should be updated to reflect this version
}

type GatewayResponse_SnapshotListResult struct {
	SnapshotListResult *SnapshotListResult `protobuf:"bytes,10,opt,name=snapshotListResult,proto3,oneof"`
}

type GatewayResponse_SnapshotStoreResult struct {
	SnapshotStoreResult *SnapshotStoreResult `protobuf:"bytes,11,opt,name=snapshotStoreResult,proto3,oneof"`
}

type GatewayResponse_SnapshotLoadResult struct {
	SnapshotLoadResult *SnapshotLoadResult `protobuf:"bytes,12,opt,name=snapshotLoadResult,proto3,oneof"`
}

type GatewayResponse_SnapshotDeleteResult struct {
	SnapshotDeleteResult *SnapshotDeleteResult `protobuf:"bytes,13,opt,name=snapshotDeleteResult,proto3,oneof"`
}

type GatewayResponse_BookmarkListResult struct {
	BookmarkListResult *BookmarkListResult `protobuf:"bytes,14,opt,name=bookmarkListResult,proto3,oneof"`
}

type GatewayResponse_BookmarkStoreResult struct {
	BookmarkStoreResult *BookmarkStoreResult `protobuf:"bytes,15,opt,name=bookmarkStoreResult,proto3,oneof"`
}

type GatewayResponse_BookmarkLoadResult struct {
	BookmarkLoadResult *BookmarkLoadResult `protobuf:"bytes,16,opt,name=bookmarkLoadResult,proto3,oneof"`
}

type GatewayResponse_BookmarkDeleteResult struct {
	BookmarkDeleteResult *BookmarkDeleteResult `protobuf:"bytes,17,opt,name=bookmarkDeleteResult,proto3,oneof"`
}

func (*GatewayResponse_NewItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_NewEdge) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_Status) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_Error) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_QueryError) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_DeleteItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_DeleteEdge) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_UpdateItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotListResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotStoreResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotLoadResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotDeleteResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkListResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkStoreResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkLoadResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkDeleteResult) isGatewayResponse_ResponseType() {}

// Contains the status of the gateway request.
type GatewayRequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponderStates map[string]ResponderState     `protobuf:"bytes,1,rep,name=responderStates,proto3" json:"responderStates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ResponderState"`
	Summary         *GatewayRequestStatus_Summary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Whether all items have finished being processed by the gateway. It is
	// possible for all responders to be complete, but the gateway is still
	// working. A request should only be considered complete when all working ==
	// 0 and postProcessingComplete == true
	PostProcessingComplete bool `protobuf:"varint,4,opt,name=postProcessingComplete,proto3" json:"postProcessingComplete,omitempty"`
}

func (x *GatewayRequestStatus) Reset() {
	*x = GatewayRequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequestStatus) ProtoMessage() {}

func (x *GatewayRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequestStatus.ProtoReflect.Descriptor instead.
func (*GatewayRequestStatus) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayRequestStatus) GetResponderStates() map[string]ResponderState {
	if x != nil {
		return x.ResponderStates
	}
	return nil
}

func (x *GatewayRequestStatus) GetSummary() *GatewayRequestStatus_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *GatewayRequestStatus) GetPostProcessingComplete() bool {
	if x != nil {
		return x.PostProcessingComplete
	}
	return false
}

type GatewayRequestStatus_Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Working    int32 `protobuf:"varint,1,opt,name=working,proto3" json:"working,omitempty"`
	Stalled    int32 `protobuf:"varint,2,opt,name=stalled,proto3" json:"stalled,omitempty"`
	Complete   int32 `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	Error      int32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
	Cancelled  int32 `protobuf:"varint,5,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	Responders int32 `protobuf:"varint,6,opt,name=responders,proto3" json:"responders,omitempty"`
}

func (x *GatewayRequestStatus_Summary) Reset() {
	*x = GatewayRequestStatus_Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequestStatus_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequestStatus_Summary) ProtoMessage() {}

func (x *GatewayRequestStatus_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequestStatus_Summary.ProtoReflect.Descriptor instead.
func (*GatewayRequestStatus_Summary) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GatewayRequestStatus_Summary) GetWorking() int32 {
	if x != nil {
		return x.Working
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetStalled() int32 {
	if x != nil {
		return x.Stalled
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetCancelled() int32 {
	if x != nil {
		return x.Cancelled
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetResponders() int32 {
	if x != nil {
		return x.Responders
	}
	return 0
}

var File_gateway_proto protoreflect.FileDescriptor

var file_gateway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x94, 0x06, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xaa, 0x07, 0x0a, 0x0f, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a,
	0x07, 0x6e, 0x65, 0x77, 0x45, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x45, 0x64, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x64, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x48, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4b, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x70,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x1a, 0x53, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xad, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x42, 0x38, 0x42, 0x0c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x73, 0x64, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0x2d,
	0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gateway_proto_rawDescOnce sync.Once
	file_gateway_proto_rawDescData = file_gateway_proto_rawDesc
)

func file_gateway_proto_rawDescGZIP() []byte {
	file_gateway_proto_rawDescOnce.Do(func() {
		file_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gateway_proto_rawDescData)
	})
	return file_gateway_proto_rawDescData
}

var file_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gateway_proto_goTypes = []interface{}{
	(*GatewayRequest)(nil),               // 0: GatewayRequest
	(*GatewayResponse)(nil),              // 1: GatewayResponse
	(*GatewayRequestStatus)(nil),         // 2: GatewayRequestStatus
	nil,                                  // 3: GatewayRequestStatus.ResponderStatesEntry
	(*GatewayRequestStatus_Summary)(nil), // 4: GatewayRequestStatus.Summary
	(*Query)(nil),                        // 5: Query
	(*CancelQuery)(nil),                  // 6: CancelQuery
	(*UndoQuery)(nil),                    // 7: UndoQuery
	(*Expand)(nil),                       // 8: Expand
	(*UndoExpand)(nil),                   // 9: UndoExpand
	(*ListSnapshots)(nil),                // 10: ListSnapshots
	(*StoreSnapshot)(nil),                // 11: StoreSnapshot
	(*LoadSnapshot)(nil),                 // 12: LoadSnapshot
	(*DeleteSnapshot)(nil),               // 13: DeleteSnapshot
	(*ListBookmarks)(nil),                // 14: ListBookmarks
	(*StoreBookmark)(nil),                // 15: StoreBookmark
	(*LoadBookmark)(nil),                 // 16: LoadBookmark
	(*DeleteBookmark)(nil),               // 17: DeleteBookmark
	(*durationpb.Duration)(nil),          // 18: google.protobuf.Duration
	(*Item)(nil),                         // 19: Item
	(*Edge)(nil),                         // 20: Edge
	(*QueryError)(nil),                   // 21: QueryError
	(*Reference)(nil),                    // 22: Reference
	(*SnapshotListResult)(nil),           // 23: SnapshotListResult
	(*SnapshotStoreResult)(nil),          // 24: SnapshotStoreResult
	(*SnapshotLoadResult)(nil),           // 25: SnapshotLoadResult
	(*SnapshotDeleteResult)(nil),         // 26: SnapshotDeleteResult
	(*BookmarkListResult)(nil),           // 27: BookmarkListResult
	(*BookmarkStoreResult)(nil),          // 28: BookmarkStoreResult
	(*BookmarkLoadResult)(nil),           // 29: BookmarkLoadResult
	(*BookmarkDeleteResult)(nil),         // 30: BookmarkDeleteResult
	(ResponderState)(0),                  // 31: ResponderState
}
var file_gateway_proto_depIdxs = []int32{
	5,  // 0: GatewayRequest.query:type_name -> Query
	6,  // 1: GatewayRequest.cancelQuery:type_name -> CancelQuery
	7,  // 2: GatewayRequest.undoQuery:type_name -> UndoQuery
	8,  // 3: GatewayRequest.expand:type_name -> Expand
	9,  // 4: GatewayRequest.undoExpand:type_name -> UndoExpand
	10, // 5: GatewayRequest.listSnapshots:type_name -> ListSnapshots
	11, // 6: GatewayRequest.storeSnapshot:type_name -> StoreSnapshot
	12, // 7: GatewayRequest.loadSnapshot:type_name -> LoadSnapshot
	13, // 8: GatewayRequest.deleteSnapshot:type_name -> DeleteSnapshot
	14, // 9: GatewayRequest.listBookmarks:type_name -> ListBookmarks
	15, // 10: GatewayRequest.storeBookmark:type_name -> StoreBookmark
	16, // 11: GatewayRequest.loadBookmark:type_name -> LoadBookmark
	17, // 12: GatewayRequest.deleteBookmark:type_name -> DeleteBookmark
	18, // 13: GatewayRequest.minStatusInterval:type_name -> google.protobuf.Duration
	19, // 14: GatewayResponse.newItem:type_name -> Item
	20, // 15: GatewayResponse.newEdge:type_name -> Edge
	2,  // 16: GatewayResponse.status:type_name -> GatewayRequestStatus
	21, // 17: GatewayResponse.queryError:type_name -> QueryError
	22, // 18: GatewayResponse.deleteItem:type_name -> Reference
	20, // 19: GatewayResponse.deleteEdge:type_name -> Edge
	19, // 20: GatewayResponse.updateItem:type_name -> Item
	23, // 21: GatewayResponse.snapshotListResult:type_name -> SnapshotListResult
	24, // 22: GatewayResponse.snapshotStoreResult:type_name -> SnapshotStoreResult
	25, // 23: GatewayResponse.snapshotLoadResult:type_name -> SnapshotLoadResult
	26, // 24: GatewayResponse.snapshotDeleteResult:type_name -> SnapshotDeleteResult
	27, // 25: GatewayResponse.bookmarkListResult:type_name -> BookmarkListResult
	28, // 26: GatewayResponse.bookmarkStoreResult:type_name -> BookmarkStoreResult
	29, // 27: GatewayResponse.bookmarkLoadResult:type_name -> BookmarkLoadResult
	30, // 28: GatewayResponse.bookmarkDeleteResult:type_name -> BookmarkDeleteResult
	3,  // 29: GatewayRequestStatus.responderStates:type_name -> GatewayRequestStatus.ResponderStatesEntry
	4,  // 30: GatewayRequestStatus.summary:type_name -> GatewayRequestStatus.Summary
	31, // 31: GatewayRequestStatus.ResponderStatesEntry.value:type_name -> ResponderState
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_gateway_proto_init() }
func file_gateway_proto_init() {
	if File_gateway_proto != nil {
		return
	}
	file_bookmarks_proto_init()
	file_items_proto_init()
	file_responses_proto_init()
	file_snapshots_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequestStatus_Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gateway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GatewayRequest_Query)(nil),
		(*GatewayRequest_CancelQuery)(nil),
		(*GatewayRequest_UndoQuery)(nil),
		(*GatewayRequest_Expand)(nil),
		(*GatewayRequest_UndoExpand)(nil),
		(*GatewayRequest_ListSnapshots)(nil),
		(*GatewayRequest_StoreSnapshot)(nil),
		(*GatewayRequest_LoadSnapshot)(nil),
		(*GatewayRequest_DeleteSnapshot)(nil),
		(*GatewayRequest_ListBookmarks)(nil),
		(*GatewayRequest_StoreBookmark)(nil),
		(*GatewayRequest_LoadBookmark)(nil),
		(*GatewayRequest_DeleteBookmark)(nil),
	}
	file_gateway_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GatewayResponse_NewItem)(nil),
		(*GatewayResponse_NewEdge)(nil),
		(*GatewayResponse_Status)(nil),
		(*GatewayResponse_Error)(nil),
		(*GatewayResponse_QueryError)(nil),
		(*GatewayResponse_DeleteItem)(nil),
		(*GatewayResponse_DeleteEdge)(nil),
		(*GatewayResponse_UpdateItem)(nil),
		(*GatewayResponse_SnapshotListResult)(nil),
		(*GatewayResponse_SnapshotStoreResult)(nil),
		(*GatewayResponse_SnapshotLoadResult)(nil),
		(*GatewayResponse_SnapshotDeleteResult)(nil),
		(*GatewayResponse_BookmarkListResult)(nil),
		(*GatewayResponse_BookmarkStoreResult)(nil),
		(*GatewayResponse_BookmarkLoadResult)(nil),
		(*GatewayResponse_BookmarkDeleteResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gateway_proto_goTypes,
		DependencyIndexes: file_gateway_proto_depIdxs,
		MessageInfos:      file_gateway_proto_msgTypes,
	}.Build()
	File_gateway_proto = out.File
	file_gateway_proto_rawDesc = nil
	file_gateway_proto_goTypes = nil
	file_gateway_proto_depIdxs = nil
}
