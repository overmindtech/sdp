syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___        
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_       
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_      
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__     
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____    
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________   
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________  
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________ 
//         ___\///////////_____\////////////_____\///______________
option go_package = "github.com/overmindtech/sdp/go/sdp";

// RequestMethod represents the available request methods. The details of these
// methods are:
//
// GET: This takes a single unique query and should only return a single item.
//      If an item matching th parameter passed doesn't exist the server should
//      fail
//
// FIND: This takes no query (or ignores it) and should return all items that it
//       can find
//
// SEARCH: This takes a non-unique query which is designed to be used as a
//         search term. It should return some number of items (or zero) which
//         match the query
enum RequestMethod {
  GET = 0;
  FIND = 1;
  SEARCH = 2;
}

// ItemRequest represents a request for an item.
message ItemRequest {
  // The type of item to search for. "*" means all types
  string type = 1;

  // Which method to use when looking for it
  RequestMethod method = 2;

  // What query should be passed to that method
  string query = 3;

  // How deeply to link items. A value of 0 will mean that items are not linked.
  // To resolve linked items "infinitely" simply set this to a high number, with
  // the highest being 4,294,967,295. While this isn't truly *infinite*, chances
  // are that it is effectively the same, think six degrees of separation etc.
  uint32 linkDepth = 4;

  // The context for which we are requesting. To query all contexts use the the
  // wildcard '*'
  string context = 5;

  // Whether to ignore the cache and execute the request regardless.
  //
  // By default sources will implement some level of caching, this is
  // particularly important for linked items as a single request with a large
  // link depth may result in the same item being requested many times as links
  // are resolved and more and more items link to each other. However if
  // required this caching can be turned off using this parameter
  bool ignoreCache = 6;

  // A UUID to uniquely identify the request. This should be stored by the
  // requester as it will be needed later if the requester wants to cancel a
  // request. It should be stored as 128 bytes, as opposed to the textual
  // representation
  bytes UUID = 7;

  // The timeout for this request. This will affect both the initial request,
  // and also any linked item requests that are executed as part of it. This
  // means that if a request has a timeout of 10s, and takes 2s to complete, the
  // linked item requests should have a remaining timeout of 8s meaning that the
  // entire request including all linking needs to be done in 10s, not 10s for
  // *each* request
  google.protobuf.Duration timeout = 8;

  // The below fields are used when a request is made over the NATS network and
  // the requester needs to specify where the results of that request should be
  // sent. These subjects will be used in addition to the defaults and are
  // usually just dynamically generated inboxes

  // Subject that items resulting from the request should be sent to
  string itemSubject = 16;

  // Subject that both interim and final responses should be sent to
  string responseSubject = 17;
}

// The message signals that the item request with the corresponding UUID should
// be cancelled. Work should stop immediately, and a final response should be
// sent with a state of CANCELLED to acknowledge that the request has ended due
// to a cancellation
message CancelItemRequest {
  // UUID of the item request that this response is in relation to (in binary
  // format)
  bytes UUID = 1;
}

// ItemAttributes represents the known attributes for an item. These are likely
// to be common to a given type, but even this is not guaranteed. All items must
// have at least one attribute however as it needs something to uniquely
// identify it
message ItemAttributes {
  google.protobuf.Struct attrStruct = 1;
}

// This is the same as Item within the package with a couple of exceptions, no
// real reason why this whole thing couldn't be modelled in protobuf though if
// required. Just need to decide what if anything should remain private
message Item {
  string type = 1;
  string uniqueAttribute = 2;
  ItemAttributes attributes = 3;
  Metadata metadata = 4;

  // The context within which the item is unique. Item uniqueness is determined
  // by the combination of type and uniqueAttribute value. However it is
  // possible for the same item to exist in many contexts. There is not formal
  // definition for what a context should be other than the fact that it should
  // be somewhat descriptive and should ensure item uniqueness
  string context = 5;


  // --- Optional ---

  // Not all items will have relatedItems we are are using a two byte
  // integer to save one byte integers for more common things
  repeated ItemRequest linkedItemRequests = 16;

  // Linked items
  repeated Reference linkedItems = 17;

  // If an item needs to return a socket it will do the following:
  //
  // 1. Call the socket RPC on the server with the socketID as metadata
  // 2. Respond with the item and include a socket ID. This should by a UUID
  //    represented as a string of 128 bytes
  //
  // bytes socketID = 18;
}

// This is a list of items, like a Find() would return
message Items {
  repeated Item items = 1;
}

// Reference to an item
//
// The uniqueness of an item is determined by the combination of:
//
//   * Type
//   * UniqueAttributeValue
//   * Context
//
message Reference {
  string type = 1;
  string UniqueAttributeValue = 2;
  string context = 3;
}

// Metadata about the item. Where it came from, how long it took, etc.
message Metadata {
  // This is the name of the source that was used to find the item.
  string sourceName = 2;

  // The request that caused this item to be found
  ItemRequest sourceRequest = 3;

  // The time that the item was found
  google.protobuf.Timestamp timestamp = 4;

  // How long the source took to execute in total when processing the
  // ItemRequest
  google.protobuf.Duration sourceDuration = 5;

  // How long the source took to execute per item when processing the
  // ItemRequest
  google.protobuf.Duration sourceDurationPerItem = 6;

  // Whether the item should be hidden/ignored by user-facing things such as
  // GUIs and databases.
  //
  // Some types of items are only relevant in calculating higher-layer
  // abstractions and are therefore always hidden. A good example of this would
  // be the output of a command. This could be used by a remote source to gather
  // information, but we don't actually want to show the user all the commands
  // that were run, just the final item returned by the source
  bool hidden = 7;
}

// ReverseLinksRequest Is used to find linked item requests for item with
// *inbound* rather than outbound links. This allows linking in reverse e.g.
//
//   ip -> load balancer
//
// where usually only:
//
//   load balancer -> ip
//
// would be possible
message ReverseLinksRequest {
  // The item that you would like to find reverse links for
  Reference item = 1;

  // The timeout for this request
  google.protobuf.Duration timeout = 2;
}

// ReverseLinks Represents linked item requests that can be run and will result
// in objects with *inbound* links to a given item
message ReverseLinksResponse {
  // The item requests that should be executed in order to find items that link
  // to the requested item
  repeated ItemRequest linkedItemRequests = 1;

  // An error, if present. If not this will be an empty string
  string error = 2;
}
